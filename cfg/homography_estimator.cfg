#!/usr/bin/env python
PACKAGE = "drive_ros_camera_homography"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# gen.add(<parameter_name>, <type>, <level>, <description>, <default>, <min>, <max>)


# pattern type
size_enum = gen.enum([ gen.const("chessboard",         int_t, 0, "chessboard pattern"),
                       gen.const("circles",            int_t, 1, "circles pattern"),
                       gen.const("circles_asymmetric", int_t, 2, "asymmetric circles pattern")],
                     "Choose the pattern")

gen.add("pattern", int_t, 0, "pattern type", 2, 0, 2, edit_method=size_enum)


# pattern borders
gen.add("p_bot_right_x", int_t, 0, "pattern border bottom right x", 924, 0, 1280)
gen.add("p_bot_right_y", int_t, 0, "pattern border bottom right y", 242, 0, 720)

gen.add("p_bot_left_x", int_t, 0, "pattern border bottom left x", 367, 0, 1280)
gen.add("p_bot_left_y", int_t, 0, "pattern border bottom left y", 224, 0, 720)

gen.add("p_top_right_x", int_t, 0, "pattern border top right x", 744, 0, 1280)
gen.add("p_top_right_y", int_t, 0, "pattern border top right y", 53, 0, 720)

gen.add("p_top_left_x", int_t, 0, "pattern border top left x", 557, 0, 1280)
gen.add("p_top_left_y", int_t, 0, "pattern border top left y", 50, 0, 720)


# pattern settings
gen.add("points_per_col", int_t, 0, "patterns (e.g. points) per column", 15, 1, 20)
gen.add("points_per_row", int_t, 0, "patterns (e.g. points) per row", 4, 1, 20)
gen.add("pattern_length", double_t, 0, "pattern length?", 0.08, 0, 10)
gen.add("pattern_offset_x", double_t, 0, "pattern offset x", 0.453, -5, 5)
gen.add("pattern_offset_y", double_t, 0, "pattern offset y", -0.269, -5, 5)
gen.add("outline_scale_factor", int_t, 0, "outline scale factor", 50, 0, 200)


# blob filter settings
gen.add("blob_filter_by_area", bool_t, 0, "enable filter by area", True)
gen.add("blob_min_area", double_t, 0, "minimal area", 200, 0, 10000)
gen.add("blob_max_area", double_t, 0, "maximum area", 10000, 0, 10000)

gen.add("blob_filter_by_circularity", bool_t, 0, "enable filter by circularity", False)
gen.add("blob_min_circularity", double_t, 0, "minimal circularity", 0, 0, 1)
gen.add("blob_max_circularity", double_t, 0, "maximum circularity", 1, 0, 1)

gen.add("blob_filter_by_convexity", bool_t, 0, "enable filter by convexity", False)
gen.add("blob_min_convexity", double_t, 0, "minimal convexity", 0, 0, 1)
gen.add("blob_max_convexity", double_t, 0, "maximum convexity", 1, 0, 1)

gen.add("blob_filter_by_inertia", bool_t, 0, "enable filter by inertia", False)
gen.add("blob_min_inertia", double_t, 0, "minimal inertia", 0, 0, 1)
gen.add("blob_max_inertia", double_t, 0, "maximum inertia", 1, 0, 1)


exit(gen.generate(PACKAGE, "drive_ros_camera_homography", "homography_estimator"))
