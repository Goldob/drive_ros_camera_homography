%-12345X@PJL JOB
@PJL SET STRINGCODESET=UTF8
@PJL COMMENT "HP Designjet T7200ps PS3; PScript 0.3.10240.16384"
@PJL SET JOBATTR = "JobAcct1=Johannes"
@PJL SET JOBATTR = "JobAcct2=R098073"
@PJL SET JOBATTR = "JobAcct3=R098073"
@PJL SET JOBATTR = "JobAcct4=20160119214258"
@PJL SET JOBATTR = "JobAcct5=acf2d874-b13b-4878-85b7-c9b3cb4f26da"
@PJL SET JOBATTR = "JobAcct6=Adobe Illustrator CS5.1"
@PJL SET JOBATTR = "JobAcct7=CS5.1"
@PJL SET JOBATTR = "JobAcct8="
@PJL SET JOBATTR = "JobAcct9="
@PJL SET JOBATTR = "JobAcct11=Windows 10 Education"
@PJL SET JOBATTR = "JobAcct12=10.0(Build 10240 : )"
@PJL SET JOBATTR = "JobAcct13=PostScript"
@PJL SET JOBATTR = "JobAcct14=0.3.1411.12100"
@PJL SET JOBNAME = "cali_matte_punkte_neu.ai"
@PJL SET USERNAME = "Johannes"
@PJL SET MEDIADESTINATION = FOLDER
@PJL SET FOLDINGMETHODTYPE = STANDARD
@PJL SET FOLDINGMETHODENUM = 0
@PJL ENTER LANGUAGE=POSTSCRIPT
%!PS-Adobe-3.0
%%Title: cali_matte_punkte_neu.ai
%%Creator: PScript5.dll Version 5.2.2
%%CreationDate: 1/19/2016 21:42:58
%%For: Johannes
%%BoundingBox: (atend)
%%Pages: (atend)
%%Orientation: Portrait
%%PageOrder: (atend)
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentData: Clean7Bit
%%TargetDevice: (HP Designjet T7200 PostScript) (3015.107) 0
%%LanguageLevel: 3
%%HiResBoundingBox: 72.2505 42.6172 2456.1900 5076.4073
%%CropBox: 72.2505 42.6172 2456.1900 5076.4073
%ADO_BeginApplicationHeaderComments
%%Creator: Adobe Illustrator(R) 15.1
%%LanguageLevel: 3
%ADO_EndApplicationHeaderComments
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "AI11"
%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875
%ADOEndClientInjection: DocumentHeader "AI11"
%%EndComments

%%BeginDefaults
%ADO_BeginApplicationDefaultsComments
%%ViewingOrientation: 1 0 0 1
%ADO_EndApplicationDefaultsComments

%%ViewingOrientation: 1 0 0 1
%%EndDefaults


%%BeginProlog
%%BeginResource: file Pscript_WinNT_ErrorHandler 5.0 0
/currentpacking where{pop/oldpack currentpacking def/setpacking where{pop false
setpacking}if}if/$brkpage 64 dict def $brkpage begin/prnt{dup type/stringtype
ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def currentpoint/toy exch
def/tox exch def 1 setgray newpath tox toy 2 sub moveto 0 ty rlineto tx 0
rlineto 0 ty neg rlineto closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def/=={/cp 0 def
typeprint nl}def/typeprint{dup type exec}readonly def/lmargin 72 def/rmargin 72
def/tprint{dup length cp add rmargin gt{nl/cp 0 def}if dup length cp add/cp
exch def prnt}readonly def/cvsprint{=string cvs tprint( )tprint}readonly def
/integertype{cvsprint}readonly def/realtype{cvsprint}readonly def/booleantype
{cvsprint}readonly def/operatortype{(--)tprint =string cvs tprint(-- )tprint}
readonly def/marktype{pop(-mark- )tprint}readonly def/dicttype{pop
(-dictionary- )tprint}readonly def/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def/savetype{pop(-savelevel- )
tprint}readonly def/fonttype{pop(-fontid- )tprint}readonly def/nametype{dup
xcheck not{(/)tprint}if cvsprint}readonly def/stringtype{dup rcheck{(\()tprint
tprint(\))tprint}{pop(-string- )tprint}ifelse}readonly def/arraytype{dup rcheck
{dup xcheck{({)tprint{typeprint}forall(})tprint}{([)tprint{typeprint}forall(])
tprint}ifelse}{pop(-array- )tprint}ifelse}readonly def/packedarraytype{dup
rcheck{dup xcheck{({)tprint{typeprint}forall(})tprint}{([)tprint{typeprint}
forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse}readonly def/courier
/Courier findfont 10 scalefont def end errordict/handleerror{systemdict begin
$error begin $brkpage begin newerror{/newerror false store vmstatus pop pop 0
ne{grestoreall}if errorname(VMerror)ne{showpage}if initgraphics courier setfont
lmargin 720 moveto errorname(VMerror)eq{userdict/ehsave known{clear userdict
/ehsave get restore 2 vmreclaim}if vmstatus exch pop exch pop PrtVMMsg}{
(ERROR: )prnt errorname prnt nl(OFFENDING COMMAND: )prnt/command load prnt
$error/ostack known{nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}
repeat}if}ifelse systemdict/showpage get exec(%%[ Error: )print errorname
=print(; OffendingCommand: )print/command load =print( ]%%)= flush}if end end
end}dup 0 systemdict put dup 4 $brkpage put bind readonly put/currentpacking
where{pop/setpacking where{pop oldpack setpacking}if}if
%%EndResource
userdict /Pscript_WinNT_Incr 230 dict dup begin put
%%BeginResource: file Pscript_FatalError 5.0 0
userdict begin/FatalErrorIf{{initgraphics findfont 1 index 0 eq{exch pop}{dup
length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding
{ISOLatin1Encoding}stopped{StandardEncoding}if def currentdict end
/ErrFont-Latin1 exch definefont}ifelse exch scalefont setfont counttomark 3 div
cvi{moveto show}repeat showpage quit}{cleartomark}ifelse}bind def end
%%EndResource
userdict begin/PrtVMMsg{vmstatus exch sub exch pop gt{[
(Dieser Druckauftrag erfordert mehr Speicher, als auf diesem Drucker vorhanden ist. )
100 500
(Versuchen Sie es mit einer oder mehreren der folgenden Methoden und drucken Sie dann erneut:)
100 485(Wählen Sie für das Ausgabeformat die Option "Optimale Portierung".)115
470
(Stellen Sie sicher, daß auf der Registerkarte "Geräteeinstellungen" die Angabe für "Verfügbarer Postscript-Speicher" korrekt ist.)
115 455(Reduzieren Sie die Anzahl der im Dokument verwendeten Schriftarten. )
115 440(Drucken Sie das Dokument in verschiedenen Teilstücken. )115 425 12
/Times-Roman showpage(%%[ PrinterError: Low Printer VM ]%%)= true FatalErrorIf}
if}bind def end version cvi 2016 ge{/VM?{pop}bind def}{/VM? userdict/PrtVMMsg
get def}ifelse
105000 VM?
%%BeginResource: file Pscript_Win_Basic 5.0 0
/d/def load def/,/load load d/~/exch , d/?/ifelse , d/!/pop , d/`/begin , d/^
/index , d/@/dup , d/+/translate , d/$/roll , d/U/userdict , d/M/moveto , d/-
/rlineto , d/&/currentdict , d/:/gsave , d/;/grestore , d/F/false , d/T/true ,
d/N/newpath , d/E/end , d/Ac/arc , d/An/arcn , d/A/ashow , d/D/awidthshow , d/C
/closepath , d/V/div , d/O/eofill , d/L/fill , d/I/lineto , d/-c/curveto , d/-M
/rmoveto , d/+S/scale , d/Ji/setfont , d/Lc/setlinecap , d/Lj/setlinejoin , d
/Lw/setlinewidth , d/Lm/setmiterlimit , d/sd/setdash , d/S/show , d/LH/showpage
, d/K/stroke , d/W/widthshow , d/R/rotate , d/L2? false/languagelevel where{pop
languagelevel 2 ge{pop true}if}if d L2?{/xS/xshow , d/yS/yshow , d/zS/xyshow ,
d}if/b{bind d}bind d/bd{bind d}bind d/xd{~ d}bd/ld{, d}bd/bn/bind ld/lw/Lw ld
/lc/Lc ld/lj/Lj ld/sg/setgray ld/ADO_mxRot null d/self & d/OrgMx matrix
currentmatrix d/reinitialize{: OrgMx setmatrix[/TextInit/GraphInit/UtilsInit
counttomark{@ where{self eq}{F}?{cvx exec}{!}?}repeat cleartomark ;}b
/initialize{`{/Pscript_Win_Data where{!}{U/Pscript_Win_Data & put}?/ADO_mxRot ~
d/TextInitialised? F d reinitialize E}{U/Pscript_Win_Data 230 dict @ ` put
/ADO_mxRot ~ d/TextInitialised? F d reinitialize}?}b/terminate{!{& self eq
{exit}{E}?}loop E}b/suspend/terminate , d/resume{` Pscript_Win_Data `}b U `
/lucas 21690 d/featurebegin{countdictstack lucas[}b/featurecleanup{stopped
{cleartomark @ lucas eq{! exit}if}loop countdictstack ~ sub @ 0 gt{{E}repeat}
{!}?}b E/snap{transform 0.25 sub round 0.25 add ~ 0.25 sub round 0.25 add ~
itransform}b/dsnap{dtransform round ~ round ~ idtransform}b/nonzero_round{@ 0.5
ge{round}{@ -0.5 lt{round}{0 ge{1}{-1}?}?}?}b/nonzero_dsnap{dtransform
nonzero_round ~ nonzero_round ~ idtransform}b U<04>cvn{}put/rr{1 ^ 0 - 0 ~ -
neg 0 - C}b/irp{4 -2 $ + +S fx 4 2 $ M 1 ^ 0 - 0 ~ - neg 0 -}b/rp{4 2 $ M 1 ^ 0
- 0 ~ - neg 0 -}b/solid{[]0 sd}b/g{@ not{U/DefIf_save save put}if U/DefIf_bool
2 ^ put}b/DefIf_El{if U/DefIf_bool get not @{U/DefIf_save get restore}if}b/e
{DefIf_El !}b/UDF{L2?{undefinefont}{!}?}b/UDR{L2?{undefineresource}{! !}?}b
/freeVM{/Courier findfont[40 0 0 -40 0 0]makefont Ji 2 vmreclaim}b/hfRedefFont
{findfont @ length dict `{1 ^/FID ne{d}{! !}?}forall & E @ ` ~{/CharStrings 1
dict `/.notdef 0 d & E d}if/Encoding 256 array 0 1 255{1 ^ ~/.notdef put}for d
E definefont !}bind d/hfMkCIDFont{/CIDFont findresource @ length 2 add dict `{1
^ @/FID eq ~ @/XUID eq ~/UIDBase eq or or{! !}{d}?}forall/CDevProc ~ d/Metrics2
16 dict d/CIDFontName 1 ^ d & E 1 ^ ~/CIDFont defineresource ![~]composefont !}
bind d
%%EndResource
%%BeginResource: file Pscript_Win_Utils_L2 5.0 0
/rf/rectfill , d/fx{1 1 dtransform @ 0 ge{1 sub 0.5}{1 add -0.5}? 3 -1 $ @ 0 ge
{1 sub 0.5}{1 add -0.5}? 3 1 $ 4 1 $ idtransform 4 -2 $ idtransform}b/BZ{4 -2 $
snap + +S fx rf}b/rs/rectstroke , d/rc/rectclip , d/UtilsInit{currentglobal{F
setglobal}if}b/scol{! setcolor}b/colspA/DeviceGray d/colspABC/DeviceRGB d
/colspRefresh{colspABC setcolorspace}b/SetColSpace{colspABC setcolorspace}b
/resourcestatus where{!/ColorRendering/ProcSet resourcestatus{! ! T}{F}?}{F}?
not{/ColorRendering<</GetHalftoneName{currenthalftone @/HalftoneName known{
/HalftoneName get}{!/none}?}bn/GetPageDeviceName{currentpagedevice @
/PageDeviceName known{/PageDeviceName get @ null eq{!/none}if}{!/none}?}bn
/GetSubstituteCRD{!/DefaultColorRendering/ColorRendering resourcestatus{! !
/DefaultColorRendering}{(DefaultColorRendering*){cvn exit}127 string
/ColorRendering resourceforall}?}bn>>/defineresource where{!/ProcSet
defineresource !}{! !}?}if/buildcrdname{/ColorRendering/ProcSet findresource `
mark GetHalftoneName @ type @/nametype ne ~/stringtype ne and{!/none}if(.)
GetPageDeviceName @ type @/nametype ne ~/stringtype ne and{!/none}if(.)5 ^ 0 5
-1 1{^ length add}for string 6 1 $ 5 ^ 5{~ 1 ^ cvs length 1 ^ length 1 ^ sub
getinterval}repeat ! cvn 3 1 $ ! ! E}b/definecolorrendering{~ buildcrdname ~
/ColorRendering defineresource !}b/findcolorrendering where{!}{
/findcolorrendering{buildcrdname @/ColorRendering resourcestatus{! ! T}{
/ColorRendering/ProcSet findresource ` GetSubstituteCRD E F}?}b}?
/selectcolorrendering{findcolorrendering !/ColorRendering findresource
setcolorrendering}b/G2UBegin{findresource/FontInfo get/GlyphNames2Unicode get
`}bind d/G2CCBegin{findresource/FontInfo get/GlyphNames2HostCode get `}bind d
/G2UEnd{E}bind d/AddFontInfoBegin{/FontInfo 8 dict @ `}bind d/AddFontInfo{
/GlyphNames2Unicode 16 dict d/GlyphNames2HostCode 16 dict d}bind d
/AddFontInfoEnd{E d}bind d/T0AddCFFMtx2{/CIDFont findresource/Metrics2 get ` d
E}bind d
%%EndResource
end
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog

%%BeginSetup
featurebegin{
%%BeginFeature: *HPPSDocumentOptions ActualSize
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPPSAutoScaling off
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPColorOptions Color
<</ProcessColorModel /DeviceCMYK>> setpagedevice
/HPDict /ProcSet findresource /SetRedBrightness get 0 exch exec 
/HPDict /ProcSet findresource /SetGreenBrightness get 0 exch exec 
/HPDict /ProcSet findresource /SetBlueBrightness get 0 exch exec 
/HPDict /ProcSet findresource /SetLightness get 0 exch exec 
/HPDict /ProcSet findresource /SetGrayHighlightLevel get 25 exch exec 
/HPDict /ProcSet findresource /SetGrayHighlightX get 0 exch exec 
/HPDict /ProcSet findresource /SetGrayHighlightY get 0 exch exec 
/HPDict /ProcSet findresource /SetGrayMidtoneLevel get 50 exch exec 
/HPDict /ProcSet findresource /SetGrayMidtoneX get 0 exch exec 
/HPDict /ProcSet findresource /SetGrayMidtoneY get 0 exch exec 
/HPDict /ProcSet findresource /SetGrayShadowLevel get 75 exch exec 
/HPDict /ProcSet findresource /SetGrayShadowX get 0 exch exec 
/HPDict /ProcSet findresource /SetGrayShadowY get 0 exch exec 
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *PageRegion cali
/HPDict /ProcSet findresource /SetMargins get [14 14 14 14] exch exec
<</PageSize[2562.72 5034.48]/ImagingBBox null>>setpagedevice
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPPantone true
/SpotColorMatching where {
pop
true SpotColorMatching
} if
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPAutoRotate false
 /HPDict /ProcSet findresource /SetAutorotate get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *PrintQuality Best
<</PostRenderingEnhance true
/PostRenderingEnhanceDetails
<< /PrintQuality 3
/Type 36 >>
>> systemdict /setpagedevice get exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPMaximumDetail Disabled
<< /PostRenderingEnhance true
/PostRenderingEnhanceDetails
<< /MaxQualityResolution false
/Type 36 >>
>> systemdict /setpagedevice get exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEconomode Disabled
/HPDict /ProcSet findresource
 /SetEconofast get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPMorePasses Enabled
/HPDict /ProcSet findresource /SetExtraPasses get true exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPTransverse false
<</Orientation 0>> setpagedevice
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPMirrorPrint false
<</MirrorPrint false>>setpagedevice
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *MediaType Druckereinstellungen verwenden
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPSetMediaDest FOLDER
 /HPDict /ProcSet findresource /SetMediaDest get (FOLDER) exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *InputSlot AUTO
	/HPDict /ProcSet findresource /SetMediaSource get (AUTO) exch exec 
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPSaveRollPaper false
/HPDict /ProcSet findresource
 /SetInkedArea get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEnableCropLines false
/HPDict /ProcSet findresource /SetCropMarks get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPDisableAutoCutter false
/HPDict /ProcSet findresource
 /SetCutMedia get true exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPCMYK ISO Coated v2 (ECI)
/CMYKColorManagement where {
pop
/ISOCoatedv2-ECI CMYKColorManagement
} if
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPRGB sRGB
/RGBColorManagement where {
 pop
 /sRGB RGBColorManagement
} if
 %%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPPrintWithMargins Standard
/HPDict /ProcSet findresource /SetMarginLayout get /MarginLayoutStandard exch exec
/HPDict /ProcSet findresource /SetMarginType get (Normal) exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPPrintInGrayScale %%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEmulatedPrinters Off
/HPDict /ProcSet findresource /SetPrinterEmulation get /None exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEWSPrintPreview false
/HPDict /ProcSet findresource /HoldPrint get false exch exec
%%EndFeature
}featurecleanup
statusdict begin (%%[ ProductName: ) print product print ( ]%%)= flush end
[ 1 0 0 1 0 0 ] false Pscript_WinNT_Incr dup /initialize get exec
featurebegin{
%%BeginNonPPDFeature: JobTimeout 0
0 /languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/JobTimeout  4 -1 roll put setuserparams}{statusdict/setjobtimeout get exec}ifelse
%%EndNonPPDFeature
}featurecleanup

featurebegin{
%%BeginNonPPDFeature: WaitTimeout 300
300 /languagelevel where{pop languagelevel}{1}ifelse 2 ge{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%EndNonPPDFeature
}featurecleanup

featurebegin{
%%BeginFeature: *CustomPageSize
 
2563 5035 0 0 1 
  pop pop pop  % discard offsets
    3 dict begin
    /PageSize [ 4 -2 roll ] def
    /ImagingBBox null def
    currentdict end setpagedevice
   <<>> setpagedevice
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *Resolution 600dpi

%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPJobAccounting HPJOBACCT_JOBACNT_COLORAUTH

%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPJobByJobOverride JBJO

%%EndFeature
}featurecleanup
1 setlinecap 1 setlinejoin
/mysetup [ 72 600 V 0 0 -72 600 V 14.17322 5020.82666 ] def 
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup

userdict begin /ehsave save def end
%%Page: 1 1

%%EndPageComments
%%BeginPageSetup
featurebegin{
%%BeginFeature: *HPPantone true
/SpotColorMatching where {
pop
true SpotColorMatching
} if
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPAutoRotate false
 /HPDict /ProcSet findresource /SetAutorotate get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *PrintQuality Best
<</PostRenderingEnhance true
/PostRenderingEnhanceDetails
<< /PrintQuality 3
/Type 36 >>
>> systemdict /setpagedevice get exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPMaximumDetail Disabled
<< /PostRenderingEnhance true
/PostRenderingEnhanceDetails
<< /MaxQualityResolution false
/Type 36 >>
>> systemdict /setpagedevice get exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEconomode Disabled
/HPDict /ProcSet findresource
 /SetEconofast get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPMorePasses Enabled
/HPDict /ProcSet findresource /SetExtraPasses get true exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPTransverse false
<</Orientation 0>> setpagedevice
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPMirrorPrint false
<</MirrorPrint false>>setpagedevice
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *MediaType Druckereinstellungen verwenden
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPSetMediaDest FOLDER
 /HPDict /ProcSet findresource /SetMediaDest get (FOLDER) exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *InputSlot AUTO
	/HPDict /ProcSet findresource /SetMediaSource get (AUTO) exch exec 
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPSaveRollPaper false
/HPDict /ProcSet findresource
 /SetInkedArea get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEnableCropLines false
/HPDict /ProcSet findresource /SetCropMarks get false exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPDisableAutoCutter false
/HPDict /ProcSet findresource
 /SetCutMedia get true exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPCMYK ISO Coated v2 (ECI)
/CMYKColorManagement where {
pop
/ISOCoatedv2-ECI CMYKColorManagement
} if
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPRGB sRGB
/RGBColorManagement where {
 pop
 /sRGB RGBColorManagement
} if
 %%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPPrintWithMargins Standard
/HPDict /ProcSet findresource /SetMarginLayout get /MarginLayoutStandard exch exec
/HPDict /ProcSet findresource /SetMarginType get (Normal) exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPPrintInGrayScale %%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEmulatedPrinters Off
/HPDict /ProcSet findresource /SetPrinterEmulation get /None exch exec
%%EndFeature
}featurecleanup
featurebegin{
%%BeginFeature: *HPEWSPrintPreview false
/HPDict /ProcSet findresource /HoldPrint get false exch exec
%%EndFeature
}featurecleanup
/DeviceRGB dup setcolorspace /colspABC exch def
mysetup concat colspRefresh
Adobe_AGM_Utils begin
[
[/Label (1)]
[/TrimBox [72.250427246094 42.6171875 2456.1899414063 5034.4799804688]]
[/BleedBox [72.250427246094 42.6171875 2456.1899414063 5034.4799804688]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndPageSetup

30000 VM?
Pscript_WinNT_Incr begin
%%BeginResource: file Pscript_WinNT_Compat 5.0 0
userdict/Pscript_WinNT_Compat 19 dict dup begin/bd{bind def}bind def/ld{load
def}bd/$x matrix def/ANSIVec[16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde
16#4/macron 16#5/breve 16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A
/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60
/grave 16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand 16#8A
/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright 16#93
/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97/emdash 16#98
/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright 16#9C/oe 16#9F
/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency 16#A5/yen 16#A6
/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright 16#AA/ordfeminine 16#AB
/guillemotleft 16#AC/logicalnot 16#AD/hyphen 16#AE/registered 16#AF/macron
16#B0/degree 16#B1/plusminus 16#B2/twosuperior 16#B3/threesuperior 16#B4/acute
16#B5/mu 16#B6/paragraph 16#B7/periodcentered 16#B8/cedilla 16#B9/onesuperior
16#BA/ordmasculine 16#BB/guillemotright 16#BC/onequarter 16#BD/onehalf 16#BE
/threequarters 16#BF/questiondown 16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex
16#C3/Atilde 16#C4/Adieresis 16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave
16#C9/Eacute 16#CA/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE
/Icircumflex 16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute
16#D4/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute 16#DE
/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex 16#E3
/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8/egrave 16#E9
/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave 16#ED/iacute 16#EE
/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde 16#F2/ograve 16#F3/oacute
16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis 16#F7/divide 16#F8/oslash 16#F9
/ugrave 16#FA/uacute 16#FB/ucircumflex 16#FC/udieresis 16#FD/yacute 16#FE/thorn
16#FF/ydieresis]def currentdict{dup type/operatortype eq{[exch]cvx def}{pop
pop}ifelse}forall/initialize{currentdict exch begin begin}bind def/terminate{
/@FL where not{pop end end}{pop}ifelse}bind def/suspend/terminate load def
/resume/initialize load def/RS{/pagesave where{pop pagesave restore}{$x matrix
invertmatrix concat}ifelse}def/SS{/pagesave save def}def/CB{pop pop pop pop}def
/B{pop pop pop pop}def/:/gsave load def/;/grestore load def/N/newpath load def
end put
%%EndResource
end reinitialize
Pscript_WinNT_Compat begin /$x mysetup def end
Pscript_WinNT_Incr dup /suspend get exec
Pscript_WinNT_Compat dup /initialize get exec
%%BeginDocument: Pscript_Win_PassThrough
gsave
8.33333 8.33333 scale
-14.28 -14.28 translate
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
72.2504 -41.9274 mo
72.2504 4991.86 li
2456.19 4991.86 li
2456.19 -41.9274 li
cp
clp
[1 0 0 1 0 0 ]ct
1276.97 4790.14 mo
1248.63 4790.14 li
1248.63 4761.8 li
1276.97 4761.8 li
1276.97 4790.14 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.113725 .113725 .105882 rgb
f
695.872 4775.97 mo
1829.73 4775.97 li
f
14.1732 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
695.872 4775.97 mo
1778.88 4775.97 li
@
1768.54 4811.11 mo
1829.73 4775.78 li
1768.54 4740.44 li
1768.54 4811.11 li
cp
f
1262.8 4969.93 mo
1262.8 3836.08 li
f
1262.8 4969.93 mo
1262.8 3897.1 li
@
1304.96 3909.51 mo
1262.57 3836.08 li
1220.17 3909.51 li
1304.96 3909.51 li
cp
f
749.731 1224.16 mo
749.731 1271.13 711.657 1309.2 664.692 1309.2 cv
617.727 1309.2 579.653 1271.13 579.653 1224.16 cv
579.653 1177.19 617.727 1139.12 664.692 1139.12 cv
711.657 1139.12 749.731 1177.19 749.731 1224.16 cv
cp
0 0 0 rgb
f
1203.27 1224.16 mo
1203.27 1271.13 1165.2 1309.2 1118.23 1309.2 cv
1071.27 1309.2 1033.2 1271.13 1033.2 1224.16 cv
1033.2 1177.19 1071.27 1139.12 1118.23 1139.12 cv
1165.2 1139.12 1203.27 1177.19 1203.27 1224.16 cv
cp
f
1656.82 1224.16 mo
1656.82 1271.13 1618.75 1309.2 1571.78 1309.2 cv
1524.81 1309.2 1486.74 1271.13 1486.74 1224.16 cv
1486.74 1177.19 1524.81 1139.12 1571.78 1139.12 cv
1618.75 1139.12 1656.82 1177.19 1656.82 1224.16 cv
cp
f
2110.36 1224.16 mo
2110.36 1271.13 2072.29 1309.2 2025.32 1309.2 cv
1978.36 1309.2 1940.28 1271.13 1940.28 1224.16 cv
1940.28 1177.19 1978.36 1139.12 2025.32 1139.12 cv
2072.29 1139.12 2110.36 1177.19 2110.36 1224.16 cv
cp
f
1883.59 1450.93 mo
1883.59 1497.9 1845.52 1535.97 1798.55 1535.97 cv
1751.59 1535.97 1713.51 1497.9 1713.51 1450.93 cv
1713.51 1403.97 1751.59 1365.89 1798.55 1365.89 cv
1845.52 1365.89 1883.59 1403.97 1883.59 1450.93 cv
cp
f
1430.05 1450.93 mo
1430.05 1497.9 1391.97 1535.97 1345.01 1535.97 cv
1298.04 1535.97 1259.97 1497.9 1259.97 1450.93 cv
1259.97 1403.97 1298.04 1365.89 1345.01 1365.89 cv
1391.97 1365.89 1430.05 1403.97 1430.05 1450.93 cv
cp
f
976.505 1450.93 mo
976.505 1497.9 938.43 1535.97 891.465 1535.97 cv
844.497 1535.97 806.426 1497.9 806.426 1450.93 cv
806.426 1403.97 844.497 1365.89 891.465 1365.89 cv
938.43 1365.89 976.505 1403.97 976.505 1450.93 cv
cp
f
522.962 1450.93 mo
522.962 1497.9 484.887 1535.97 437.923 1535.97 cv
390.954 1535.97 352.88 1497.9 352.88 1450.93 cv
352.88 1403.97 390.954 1365.89 437.923 1365.89 cv
484.887 1365.89 522.962 1403.97 522.962 1450.93 cv
cp
f
749.731 1677.7 mo
749.731 1724.67 711.657 1762.74 664.692 1762.74 cv
617.727 1762.74 579.653 1724.67 579.653 1677.7 cv
579.653 1630.74 617.727 1592.66 664.692 1592.66 cv
711.657 1592.66 749.731 1630.74 749.731 1677.7 cv
cp
f
1203.27 1677.7 mo
1203.27 1724.67 1165.2 1762.74 1118.23 1762.74 cv
1071.27 1762.74 1033.2 1724.67 1033.2 1677.7 cv
1033.2 1630.74 1071.27 1592.66 1118.23 1592.66 cv
1165.2 1592.66 1203.27 1630.74 1203.27 1677.7 cv
cp
f
1656.82 1677.7 mo
1656.82 1724.67 1618.75 1762.74 1571.78 1762.74 cv
1524.81 1762.74 1486.74 1724.67 1486.74 1677.7 cv
1486.74 1630.74 1524.81 1592.66 1571.78 1592.66 cv
1618.75 1592.66 1656.82 1630.74 1656.82 1677.7 cv
cp
f
2110.36 1677.7 mo
2110.36 1724.67 2072.29 1762.74 2025.32 1762.74 cv
1978.36 1762.74 1940.28 1724.67 1940.28 1677.7 cv
1940.28 1630.74 1978.36 1592.66 2025.32 1592.66 cv
2072.29 1592.66 2110.36 1630.74 2110.36 1677.7 cv
cp
f
1883.59 1904.47 mo
1883.59 1951.44 1845.52 1989.51 1798.55 1989.51 cv
1751.59 1989.51 1713.51 1951.44 1713.51 1904.47 cv
1713.51 1857.51 1751.59 1819.44 1798.55 1819.44 cv
1845.52 1819.44 1883.59 1857.51 1883.59 1904.47 cv
cp
f
1430.05 1904.47 mo
1430.05 1951.44 1391.97 1989.51 1345.01 1989.51 cv
1298.04 1989.51 1259.97 1951.44 1259.97 1904.47 cv
1259.97 1857.51 1298.04 1819.44 1345.01 1819.44 cv
1391.97 1819.44 1430.05 1857.51 1430.05 1904.47 cv
cp
f
976.505 1904.47 mo
976.505 1951.44 938.43 1989.51 891.465 1989.51 cv
844.497 1989.51 806.426 1951.44 806.426 1904.47 cv
806.426 1857.51 844.497 1819.44 891.465 1819.44 cv
938.43 1819.44 976.505 1857.51 976.505 1904.47 cv
cp
f
522.962 1904.47 mo
522.962 1951.44 484.887 1989.51 437.923 1989.51 cv
390.954 1989.51 352.88 1951.44 352.88 1904.47 cv
352.88 1857.51 390.954 1819.44 437.923 1819.44 cv
484.887 1819.44 522.962 1857.51 522.962 1904.47 cv
cp
f
749.731 2131.24 mo
749.731 2178.21 711.657 2216.29 664.692 2216.29 cv
617.727 2216.29 579.653 2178.21 579.653 2131.24 cv
579.653 2084.28 617.727 2046.21 664.692 2046.21 cv
711.657 2046.21 749.731 2084.28 749.731 2131.24 cv
cp
f
1203.27 2131.24 mo
1203.27 2178.21 1165.2 2216.29 1118.23 2216.29 cv
1071.27 2216.29 1033.2 2178.21 1033.2 2131.24 cv
1033.2 2084.28 1071.27 2046.21 1118.23 2046.21 cv
1165.2 2046.21 1203.27 2084.28 1203.27 2131.24 cv
cp
f
1656.82 2131.24 mo
1656.82 2178.21 1618.75 2216.29 1571.78 2216.29 cv
1524.81 2216.29 1486.74 2178.21 1486.74 2131.24 cv
1486.74 2084.28 1524.81 2046.21 1571.78 2046.21 cv
1618.75 2046.21 1656.82 2084.28 1656.82 2131.24 cv
cp
f
2110.36 2131.24 mo
2110.36 2178.21 2072.29 2216.29 2025.32 2216.29 cv
1978.36 2216.29 1940.28 2178.21 1940.28 2131.24 cv
1940.28 2084.28 1978.36 2046.21 2025.32 2046.21 cv
2072.29 2046.21 2110.36 2084.28 2110.36 2131.24 cv
cp
f
1883.59 2358.02 mo
1883.59 2404.98 1845.52 2443.06 1798.55 2443.06 cv
1751.59 2443.06 1713.51 2404.98 1713.51 2358.02 cv
1713.51 2311.05 1751.59 2272.98 1798.55 2272.98 cv
1845.52 2272.98 1883.59 2311.05 1883.59 2358.02 cv
cp
f
1430.05 2358.02 mo
1430.05 2404.98 1391.97 2443.06 1345.01 2443.06 cv
1298.04 2443.06 1259.97 2404.98 1259.97 2358.02 cv
1259.97 2311.05 1298.04 2272.98 1345.01 2272.98 cv
1391.97 2272.98 1430.05 2311.05 1430.05 2358.02 cv
cp
f
976.505 2358.02 mo
976.505 2404.98 938.43 2443.06 891.465 2443.06 cv
844.497 2443.06 806.426 2404.98 806.426 2358.02 cv
806.426 2311.05 844.497 2272.98 891.465 2272.98 cv
938.43 2272.98 976.505 2311.05 976.505 2358.02 cv
cp
f
522.962 2358.02 mo
522.962 2404.98 484.887 2443.06 437.923 2443.06 cv
390.954 2443.06 352.88 2404.98 352.88 2358.02 cv
352.88 2311.05 390.954 2272.98 437.923 2272.98 cv
484.887 2272.98 522.962 2311.05 522.962 2358.02 cv
cp
f
749.731 2584.79 mo
749.731 2631.76 711.657 2669.83 664.692 2669.83 cv
617.727 2669.83 579.653 2631.76 579.653 2584.79 cv
579.653 2537.82 617.727 2499.75 664.692 2499.75 cv
711.657 2499.75 749.731 2537.82 749.731 2584.79 cv
cp
f
1203.27 2584.79 mo
1203.27 2631.76 1165.2 2669.83 1118.23 2669.83 cv
1071.27 2669.83 1033.2 2631.76 1033.2 2584.79 cv
1033.2 2537.82 1071.27 2499.75 1118.23 2499.75 cv
1165.2 2499.75 1203.27 2537.82 1203.27 2584.79 cv
cp
f
1656.82 2584.79 mo
1656.82 2631.76 1618.75 2669.83 1571.78 2669.83 cv
1524.81 2669.83 1486.74 2631.76 1486.74 2584.79 cv
1486.74 2537.82 1524.81 2499.75 1571.78 2499.75 cv
1618.75 2499.75 1656.82 2537.82 1656.82 2584.79 cv
cp
f
2110.36 2584.79 mo
2110.36 2631.76 2072.29 2669.83 2025.32 2669.83 cv
1978.36 2669.83 1940.28 2631.76 1940.28 2584.79 cv
1940.28 2537.82 1978.36 2499.75 2025.32 2499.75 cv
2072.29 2499.75 2110.36 2537.82 2110.36 2584.79 cv
cp
f
1883.59 2811.56 mo
1883.59 2858.53 1845.52 2896.6 1798.55 2896.6 cv
1751.59 2896.6 1713.51 2858.53 1713.51 2811.56 cv
1713.51 2764.59 1751.59 2726.52 1798.55 2726.52 cv
1845.52 2726.52 1883.59 2764.59 1883.59 2811.56 cv
cp
f
1430.05 2811.56 mo
1430.05 2858.53 1391.97 2896.6 1345.01 2896.6 cv
1298.04 2896.6 1259.97 2858.53 1259.97 2811.56 cv
1259.97 2764.59 1298.04 2726.52 1345.01 2726.52 cv
1391.97 2726.52 1430.05 2764.59 1430.05 2811.56 cv
cp
f
976.505 2811.56 mo
976.505 2858.53 938.43 2896.6 891.465 2896.6 cv
844.497 2896.6 806.426 2858.53 806.426 2811.56 cv
806.426 2764.59 844.497 2726.52 891.465 2726.52 cv
938.43 2726.52 976.505 2764.59 976.505 2811.56 cv
cp
f
522.962 2811.56 mo
522.962 2858.53 484.887 2896.6 437.923 2896.6 cv
390.954 2896.6 352.88 2858.53 352.88 2811.56 cv
352.88 2764.59 390.954 2726.52 437.923 2726.52 cv
484.887 2726.52 522.962 2764.59 522.962 2811.56 cv
cp
f
749.731 3038.33 mo
749.731 3085.3 711.657 3123.37 664.692 3123.37 cv
617.727 3123.37 579.653 3085.3 579.653 3038.33 cv
579.653 2991.37 617.727 2953.29 664.692 2953.29 cv
711.657 2953.29 749.731 2991.37 749.731 3038.33 cv
cp
f
1203.27 3038.33 mo
1203.27 3085.3 1165.2 3123.37 1118.23 3123.37 cv
1071.27 3123.37 1033.2 3085.3 1033.2 3038.33 cv
1033.2 2991.37 1071.27 2953.29 1118.23 2953.29 cv
1165.2 2953.29 1203.27 2991.37 1203.27 3038.33 cv
cp
f
1656.82 3038.33 mo
1656.82 3085.3 1618.75 3123.37 1571.78 3123.37 cv
1524.81 3123.37 1486.74 3085.3 1486.74 3038.33 cv
1486.74 2991.37 1524.81 2953.29 1571.78 2953.29 cv
1618.75 2953.29 1656.82 2991.37 1656.82 3038.33 cv
cp
f
2110.36 3038.33 mo
2110.36 3085.3 2072.29 3123.37 2025.32 3123.37 cv
1978.36 3123.37 1940.28 3085.3 1940.28 3038.33 cv
1940.28 2991.37 1978.36 2953.29 2025.32 2953.29 cv
2072.29 2953.29 2110.36 2991.37 2110.36 3038.33 cv
cp
f
1883.59 3265.1 mo
1883.59 3312.07 1845.52 3350.14 1798.55 3350.14 cv
1751.59 3350.14 1713.51 3312.07 1713.51 3265.1 cv
1713.51 3218.14 1751.59 3180.06 1798.55 3180.06 cv
1845.52 3180.06 1883.59 3218.14 1883.59 3265.1 cv
cp
f
1430.05 3265.1 mo
1430.05 3312.07 1391.97 3350.14 1345.01 3350.14 cv
1298.04 3350.14 1259.97 3312.07 1259.97 3265.1 cv
1259.97 3218.14 1298.04 3180.06 1345.01 3180.06 cv
1391.97 3180.06 1430.05 3218.14 1430.05 3265.1 cv
cp
f
976.505 3265.1 mo
976.505 3312.07 938.43 3350.14 891.465 3350.14 cv
844.497 3350.14 806.426 3312.07 806.426 3265.1 cv
806.426 3218.14 844.497 3180.06 891.465 3180.06 cv
938.43 3180.06 976.505 3218.14 976.505 3265.1 cv
cp
f
522.962 3265.1 mo
522.962 3312.07 484.887 3350.14 437.923 3350.14 cv
390.954 3350.14 352.88 3312.07 352.88 3265.1 cv
352.88 3218.14 390.954 3180.06 437.923 3180.06 cv
484.887 3180.06 522.962 3218.14 522.962 3265.1 cv
cp
f
749.731 3038.33 mo
749.731 3085.3 711.657 3123.37 664.692 3123.37 cv
617.727 3123.37 579.653 3085.3 579.653 3038.33 cv
579.653 2991.37 617.727 2953.29 664.692 2953.29 cv
711.657 2953.29 749.731 2991.37 749.731 3038.33 cv
cp
f
1203.27 3038.33 mo
1203.27 3085.3 1165.2 3123.37 1118.23 3123.37 cv
1071.27 3123.37 1033.2 3085.3 1033.2 3038.33 cv
1033.2 2991.37 1071.27 2953.29 1118.23 2953.29 cv
1165.2 2953.29 1203.27 2991.37 1203.27 3038.33 cv
cp
f
1656.82 3038.33 mo
1656.82 3085.3 1618.75 3123.37 1571.78 3123.37 cv
1524.81 3123.37 1486.74 3085.3 1486.74 3038.33 cv
1486.74 2991.37 1524.81 2953.29 1571.78 2953.29 cv
1618.75 2953.29 1656.82 2991.37 1656.82 3038.33 cv
cp
f
2110.36 3038.33 mo
2110.36 3085.3 2072.29 3123.37 2025.32 3123.37 cv
1978.36 3123.37 1940.28 3085.3 1940.28 3038.33 cv
1940.28 2991.37 1978.36 2953.29 2025.32 2953.29 cv
2072.29 2953.29 2110.36 2991.37 2110.36 3038.33 cv
cp
f
749.731 3491.88 mo
749.731 3538.84 711.657 3576.92 664.692 3576.92 cv
617.727 3576.92 579.653 3538.84 579.653 3491.88 cv
579.653 3444.91 617.727 3406.84 664.692 3406.84 cv
711.657 3406.84 749.731 3444.91 749.731 3491.88 cv
cp
f
1203.27 3491.88 mo
1203.27 3538.84 1165.2 3576.92 1118.23 3576.92 cv
1071.27 3576.92 1033.2 3538.84 1033.2 3491.88 cv
1033.2 3444.91 1071.27 3406.84 1118.23 3406.84 cv
1165.2 3406.84 1203.27 3444.91 1203.27 3491.88 cv
cp
f
1656.82 3491.88 mo
1656.82 3538.84 1618.75 3576.92 1571.78 3576.92 cv
1524.81 3576.92 1486.74 3538.84 1486.74 3491.88 cv
1486.74 3444.91 1524.81 3406.84 1571.78 3406.84 cv
1618.75 3406.84 1656.82 3444.91 1656.82 3491.88 cv
cp
f
2110.36 3491.88 mo
2110.36 3538.84 2072.29 3576.92 2025.32 3576.92 cv
1978.36 3576.92 1940.28 3538.84 1940.28 3491.88 cv
1940.28 3444.91 1978.36 3406.84 2025.32 3406.84 cv
2072.29 3406.84 2110.36 3444.91 2110.36 3491.88 cv
cp
f
749.731 3491.88 mo
749.731 3538.84 711.657 3576.92 664.692 3576.92 cv
617.727 3576.92 579.653 3538.84 579.653 3491.88 cv
579.653 3444.91 617.727 3406.84 664.692 3406.84 cv
711.657 3406.84 749.731 3444.91 749.731 3491.88 cv
cp
f
1203.27 3491.88 mo
1203.27 3538.84 1165.2 3576.92 1118.23 3576.92 cv
1071.27 3576.92 1033.2 3538.84 1033.2 3491.88 cv
1033.2 3444.91 1071.27 3406.84 1118.23 3406.84 cv
1165.2 3406.84 1203.27 3444.91 1203.27 3491.88 cv
cp
f
1656.82 3491.88 mo
1656.82 3538.84 1618.75 3576.92 1571.78 3576.92 cv
1524.81 3576.92 1486.74 3538.84 1486.74 3491.88 cv
1486.74 3444.91 1524.81 3406.84 1571.78 3406.84 cv
1618.75 3406.84 1656.82 3444.91 1656.82 3491.88 cv
cp
f
2110.36 3491.88 mo
2110.36 3538.84 2072.29 3576.92 2025.32 3576.92 cv
1978.36 3576.92 1940.28 3538.84 1940.28 3491.88 cv
1940.28 3444.91 1978.36 3406.84 2025.32 3406.84 cv
2072.29 3406.84 2110.36 3444.91 2110.36 3491.88 cv
cp
f
749.731 317.074 mo
749.731 364.041 711.657 402.113 664.692 402.113 cv
617.727 402.113 579.653 364.041 579.653 317.074 cv
579.653 270.109 617.727 232.034 664.692 232.034 cv
711.657 232.034 749.731 270.109 749.731 317.074 cv
cp
f
1203.27 317.074 mo
1203.27 364.041 1165.2 402.113 1118.23 402.113 cv
1071.27 402.113 1033.2 364.041 1033.2 317.074 cv
1033.2 270.109 1071.27 232.034 1118.23 232.034 cv
1165.2 232.034 1203.27 270.109 1203.27 317.074 cv
cp
f
1656.82 317.074 mo
1656.82 364.041 1618.75 402.113 1571.78 402.113 cv
1524.81 402.113 1486.74 364.041 1486.74 317.074 cv
1486.74 270.109 1524.81 232.034 1571.78 232.034 cv
1618.75 232.034 1656.82 270.109 1656.82 317.074 cv
cp
f
2110.36 317.074 mo
2110.36 364.041 2072.29 402.113 2025.32 402.113 cv
1978.36 402.113 1940.28 364.041 1940.28 317.074 cv
1940.28 270.109 1978.36 232.034 2025.32 232.034 cv
2072.29 232.034 2110.36 270.109 2110.36 317.074 cv
cp
f
1883.59 543.846 mo
1883.59 590.812 1845.52 628.885 1798.55 628.885 cv
1751.59 628.885 1713.51 590.812 1713.51 543.846 cv
1713.51 496.881 1751.59 458.808 1798.55 458.808 cv
1845.52 458.808 1883.59 496.881 1883.59 543.846 cv
cp
f
1430.05 543.846 mo
1430.05 590.812 1391.97 628.885 1345.01 628.885 cv
1298.04 628.885 1259.97 590.812 1259.97 543.846 cv
1259.97 496.881 1298.04 458.808 1345.01 458.808 cv
1391.97 458.808 1430.05 496.881 1430.05 543.846 cv
cp
f
976.505 543.846 mo
976.505 590.812 938.43 628.885 891.465 628.885 cv
844.497 628.885 806.426 590.812 806.426 543.846 cv
806.426 496.881 844.497 458.808 891.465 458.808 cv
938.43 458.808 976.505 496.881 976.505 543.846 cv
cp
f
522.962 543.846 mo
522.962 590.812 484.887 628.885 437.923 628.885 cv
390.954 628.885 352.88 590.812 352.88 543.846 cv
352.88 496.881 390.954 458.808 437.923 458.808 cv
484.887 458.808 522.962 496.881 522.962 543.846 cv
cp
f
749.731 770.616 mo
749.731 817.584 711.657 855.656 664.692 855.656 cv
617.727 855.656 579.653 817.584 579.653 770.616 cv
579.653 723.652 617.727 685.577 664.692 685.577 cv
711.657 685.577 749.731 723.652 749.731 770.616 cv
cp
f
1203.27 770.616 mo
1203.27 817.584 1165.2 855.656 1118.23 855.656 cv
1071.27 855.656 1033.2 817.584 1033.2 770.616 cv
1033.2 723.652 1071.27 685.577 1118.23 685.577 cv
1165.2 685.577 1203.27 723.652 1203.27 770.616 cv
cp
f
1656.82 770.616 mo
1656.82 817.584 1618.75 855.656 1571.78 855.656 cv
1524.81 855.656 1486.74 817.584 1486.74 770.616 cv
1486.74 723.652 1524.81 685.577 1571.78 685.577 cv
1618.75 685.577 1656.82 723.652 1656.82 770.616 cv
cp
f
2110.36 770.616 mo
2110.36 817.584 2072.29 855.656 2025.32 855.656 cv
1978.36 855.656 1940.28 817.584 1940.28 770.616 cv
1940.28 723.652 1978.36 685.577 2025.32 685.577 cv
2072.29 685.577 2110.36 723.652 2110.36 770.616 cv
cp
f
1883.59 997.39 mo
1883.59 1044.35 1845.52 1082.43 1798.55 1082.43 cv
1751.59 1082.43 1713.51 1044.35 1713.51 997.39 cv
1713.51 950.424 1751.59 912.351 1798.55 912.351 cv
1845.52 912.351 1883.59 950.424 1883.59 997.39 cv
cp
f
1430.05 997.39 mo
1430.05 1044.35 1391.97 1082.43 1345.01 1082.43 cv
1298.04 1082.43 1259.97 1044.35 1259.97 997.39 cv
1259.97 950.424 1298.04 912.351 1345.01 912.351 cv
1391.97 912.351 1430.05 950.424 1430.05 997.39 cv
cp
f
976.505 997.39 mo
976.505 1044.35 938.43 1082.43 891.465 1082.43 cv
844.497 1082.43 806.426 1044.35 806.426 997.39 cv
806.426 950.424 844.497 912.351 891.465 912.351 cv
938.43 912.351 976.505 950.424 976.505 997.39 cv
cp
f
522.962 997.39 mo
522.962 1044.35 484.887 1082.43 437.923 1082.43 cv
390.954 1082.43 352.88 1044.35 352.88 997.39 cv
352.88 950.424 390.954 912.351 437.923 912.351 cv
484.887 912.351 522.962 950.424 522.962 997.39 cv
cp
f
%ADOBeginSubsetFont: Roboto-Regular Initial
ct_T42Dict begin
-0.477 -0.27 1.168 1.055
 256 array 0 1 255 {1 index exch /.notdef put} for  /Roboto-Regular
Type42DictBegin
[<00010000000c000c000c000c4f532f32b9c7013b000000cc000000606376
74201ee002540000012c000000306670676d2fe64eab0000015c000001bc
676c7966cd5e323b000021f80001904c68656164ff11cfae000003180000
0036686865610d130a360000035000000024686d74787a3c753300000374
0000102c6c6f63615405b7aa000013a0000008186d617870063803930000
1bb8000000206e616d65963ea76800001bd80000048370726570b101b350
0000205c0000019c676469720000000000000000000000000003049c0190
00050000059a05330000011f059a0533000003d100660200000002000000
000000000000e00002ef5000205b0000002000000000476f6f670000000d
fffd0862fdd500000862022b2000019f4f010000043a05b0002000200002
002a007a009b00a600cc008c00000015fe600015043a001405b00015048d
00100321000b063500250722001500000000b0002c4bb0095058b101018e
59b801ff85b0841db109035f5e2db0012c2020456944b001602db0022cb0
012a212db0032c2046b003254652582359208a208a49648a204620686164
b004254620686164525823658a592f20b00053586920b000545821b04059
1b6920b000545821b0406559593a2db0042c2046b00425465258238a5920
46206a6164b0042546206a61645258238a592ffd2db0052c4b20b0032650
585158b080441bb04044591b21212045b0c05058b0c0441b2159592db006
2c2020456944b001602020457d691844b001602db0072cb0062a2db0082c
4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a23
5920b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a
1b8a235920b0032653582321b801408a8a1b8a235920b003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db009
2c4b535845441b2121592db00a2cb016452db00b2cb017452db00c2cb127
0188208a5358b94000040063b80800885458b9001603e870591bb0235358
b02088b810005458b9001603e8705959592db00d2cb04088b820005a58b1
1700441bb9001703e844592d0001000000010000865bc8055f0f3cf50019
080000000000cc47b83300000000ce14cc31fc2cfdd5095c087700000009
0002000000000000000100000862fdd500000916fc2cff3f088200010000
000000000000000000000000040b01fd00000000000001fd000001fd0000
021b00ab029c005004fc00460481006e05da006804fc00400167005002a7
008402af00060374001c048a004e0194003002310023022400a103520010
04820071048100ba0481005c0481005f0481003704810098048100840481
004d0481006604810053020500a1020d0063041000470481009804300088
03ce003a07290060052e0014051d00b405110076054500b404ad00b404a9
00b40574007805b500b4024300be046a003d052500b4045200b4070700b4
05b500b405740071052000b405740071054d00b404fd006104b00022056a
0093050f001607110036050f004204e2001404c900610228008f034e0027
0228000b0358003d03a30004028100520466006a048c008f043f0061048c
0062043b006302c30038048c0064048c008f0204009f0212ffbe041a0090
0204009f06fe008f048c008f048c0061048c008f048c006202be008f042f
006702c40022048c008b0406002e060e002d0406002e0406001a0406005e
02b8003f01fb00af02b80015056f008001fd000001fb00900462006b04aa
004605b0006804db001e01f3009104eb005a03fd00aa0644005803950078
03c600620471007f023100230644005803b6007b02fb0080044900630364
0071036c006a028e0083048c009903ee003f021c00a101fd0077022d005f
03a5007803c6006e063b00b806ac00b806f5007a03f50072052e0014052e
0014052e0014052e0014052e0014052e00140782ffec0511007604ad00b4
04ad00b404ad00b404ad00b40243ffde024300be0243fff10243ffcb0563
002a05b500b4057400710574007105740071057400710574007104480058
05740071056a0093056a0093056a0093056a009304e2001404b900a304c5
00890466006a0466006a0466006a0466006a0466006a0466006a06c1003a
043f0061043b0063043b0063043b0063043b00630203ffb9020300990203
ffcc0203ffa604b20048048c008f048c0061048c0061048c0061048c0061
048c006104920047048c0061048c008b048c008b048c008b048c008b0406
001a04a200990406001a052e00140466006a052e00140466006a052e0014
0466006a05110076043f006105110076043f006105110076043f00610511
0076043f0061054500b4052200620563002a04aa006204ad00b4043b0063
04ad00b4043b006304ad00b4043b006304ad00b4043b006304ad00b4043b
006305740078048c006405740078048c006405740078048c006405740078
048c006405b500b4048c008f059f001f04aa00010243ffc80203ffa30243
ffc00203ff9b0243fff80203ffd30243002e0204000e024300b402030099
06ad00be0416009f046a003d020bffbc052500b4041a0090047800990452
00b40204009f045200b40204006e045200b4029a009f045200b402e0009f
04350028022e002505b500b4048c008f05b500b4048c008f05b500b4048c
008f048cffe0058800a1048c008f05740071048c006105740071048c0061
05740071048c006107a80068073e0061054d00b402be008f054d00b402be
006b054d00b402be006504fd0061042f006704fd0061042f006704fd0061
042f006704fd0061042f006704b0002202c4002204b0002202ec002204b0
002202c4fff8056a0093048c008b056a0093048c008b056a0093048c008b
056a0093048c008b056a0093048c008b056a0093048c008b07110036060e
002d04e200140406001a04e2001404c900610406005e04c900610406005e
04c900610406005e0204009f02beffe9057b006c049700610596009304b4
008b020bffbc052e00140466006a0782ffec06c1003a05740071048c0061
04fd0061042f0067020bffbc01a2005003d300ab039a008c036c0081022c
00a002b800850232004403d3008702fa006402a000b60000fcd10000fd6f
0000fc8d0000fd5b0000fc2c0000fd3c020e00c3041500a1052e0014021d
00a10511ffe30619001402a70018058800440546ff81056a003d02a0ffcd
052e0014051d00b4047400b405a7001e04ad00b404c9006105b500b40574
0071024300be052500b405410031070700b405b500b40495007b05740071
05b700b4052000b40495004604b0002204e20014059f0054050f00420588
0057055600700243ffcb04e2001404860062044f0062048c008f02a000c5
048c008d0486006204bd009d0407002e048c0061044f0062042f0073048c
008f048d007702a000c504780099048c0038048c00990406002e04130056
048c006104c5004f048c008f044e0062048c006104300051048c008d05aa
00530477005e05a0005b06cd006c02a0ffd8048c008d048c0061048c008d
06cd006c04f100710441ffea0648004e04ad00b404ad00b4060100290474
00b4056a008704fd0061024300be0243ffcb046a003d0899003208a400b4
06860042052500b405b500b40511005505b700b4052e0014050c00a3051d
00b4047400b4060e003004ad00b4074d001c0569007805b500b405b500b4
052500b405ab0031070700b405b500b40574007105b700b4052000b40511
007604b000220507005506370055050f0042062800b505810093078c00b4
07ca00b4060c001606f600b4050a00a3056900b5072100be052100630466
006a046d0061048c00900351008f04df002e043b00630620001504100058
048c008f048c008f043e0099046d001a05f80099048c008f048c0061048c
008f048c008f043f0061041800470406001a05cd00620406002e04c2008f
046b007f066d008f06c4008f04f4001d065100ad04590099044e00630687
0099048b004e043b0063043b0063048cffe70351008f044f006b042f0067
0204009f0203ffa60212ffbe06f6004106f5008f048c0013043e0099048c
008f0406001a048c008f0705009d0618007c050affcd0459ffdb072d00bf
05fa009704d3002b0449000d070d00d1060d00ba06df009505ec00950916
00be07e300990425004a03da00490588005705a0005b05740071048d0061
050f00160407002e050f00160407fffe097a00710892006105740071048c
006106fe009d0618007b0706009d0619007c05380076044b006205020070
048d00d404b900fb03130100034f012c081c003b07d8004d05b500b4048c
008f050affcd0459ffdb051d00b4048b008f046400a30393008f0474fffc
0351fff304e600b40408008f074d001c0620001504bf0078041000580525
00b4043e0099050f00a3046800990539fff5042effcf06900043058e0041
05b500b4048c008f07c400b405b0008f083300b406fa008f05ee007104d7
006c05110076043f006104b000220418004704e200140407002e04e20014
0407002e050f00420406002e073700370593002005810093046b007f0576
0093046c007f0576008a046c009406cb004d04bfffdf0636004d04bfffdf
024300be074d001c06200015050f00a30460009905ab0031046d001a05b5
00b4048c008f05b500b4048c008f05810093046b007f070700b405f80099
024300be052e00140466006a052e00140466006a0782ffec06c1003a04ad
00b4043b0063059100590442007405910059044200740697001c05c10015
05690078044f005804aa006904aa006905b500b4048c008f05b500b4048c
008f05740071048c006105740071048d006105740071048d0061056900b5
044e0063050700550406001a050700550406001a050700550406001a0581
0093046b007f047400b40351008f06f600b4065100ad04bf004103490042
050f00420406002e050f00420406002e0507005b048c006206a4005b06e5
006206570036052c0031044b00500409007b07c2004506760041080300a9
06a2008f04f70076041e006205ae0024052100460569009c044f006205ab
0031046d001a052e00140466006a070700b406fe008f07110036060e002d
07110036060e002d07110036060e002d052e00140466006a052e00140466
006a052e00140466006a052e00140466ffa3052e00140466006a052e0014
0466006a052e00140466006a052e00140466006a052e00140466006a052e
00140466006a052e00140466006a052e00140466006a04ad00b4043b0063
04ad00b4043b006304ad00b4043b006304ad00b4043b006304adffec043b
ffa604ad00b4043b006304ad00b4043b006304ad00b4043b0063024300be
02030099024300b40204009505740071048c006105740071048c00610574
0071048c006105740032048cffbe05740071048c006105740071048c0061
05740071048c0061057b006c04970061057b006c04970061057b006c0497
0061057b006c04970061057b006c04970061056a0093048c008b056a0093
048c008b0596009304b4008b0596009304b4008b0596009304b4008b0596
009304b4008b0596009304b4008b04e200140406001a04e200140406001a
04e200140406001a04e200140406001a0574ff2404140000082900000414
00000829000002b90000020a0000015c0000047f00000230000001a20000
00d1000000000000058800b4067c00bc067c00bc03a7000501a2005001a2
005001a1005001a2002b02e8005002f0005002d600500469004604920057
02b7008903ca00a1056400a107a4004001670050029c00500267006c0267
0058043600ab03a5003b03ad00470360007a04a9001c04aa0046069200a4
04aa00620440004f05e9007c03d2006a08cc00ab050400670518009806bf
006b0756006e0786007006df006b04a20048059c00a804b20046049200a8
04d7003f082f0068020dffbc04820065043000980438009e0440009a0408
0029020800650474001c04c7003807370038078a0038000000000834005b
0835005c0203ff99034c006803840070036c006804300078046800470416
005a03e50059025e004e047900780440004e0461001e048900370602003f
04bb002705040089043000470471005d04ad009904e3007004de008b04cb
0070051c009903a0009205f8009903bd009904610099040f004002030099
04fb009904d30070041f00990447009904aa009904920070047900990207
00a003a4008104ba002704090078040aff55040f006e040a006e03a40081
03a4008103a5008101910060023100130204ffbe030cffa00307003b047f
005b04ab0074049f0046049f00a7049f00930401001e04d5007d049f0062
04790099041f005a037c0078037c007203940057036c006a035b007102b8
009b022d005f03a50078042800470430005803bd00470311005f036c0081
04aafff604aafff60430004704ba002704ba002704ba002704ba002704ba
002704ba002704ba00270492007004470099044700990447009904470099
0203ffb7020300990203ffca0203ffa4051c009904cb007004cb007004cb
007004cb007004cb0070050400890504008905040089050400890461001e
04ba002704ba002704ba00270492007004920070049200700492007004aa
0099044700990447009904470099044700990447009904d3007004d30070
04d3007004d3007004fb00990203ffa1050400890203ffd10203003c0203
008f040f00400461009903bd006b03bd009903bd009903bd0099051c0099
051c0099051c009904cb007004cb007004cb007004ad009904ad009904ad
00990471005d0471005d0471005d0471005d043000470430004705040089
05040089050400890504008908e2005d0440004e0440004e0440004e0461
001e0461001e0602003f0504008900000000000000000000002c004c00c6
013201c2024e0262028c02b602e6030c0324033c0356036e03bc03e8043e
04b804fe055e05c605fc067606de06f4070a072e0756077a07cc087208c0
0920097209b609fe0a580aba0b240b400b720bd20bf60c5c0cb20d040d4a
0da60e080e6e0e9a0ed60f100f7e0fce10101046106c108410a810ca10e6
111c119411f0123a129612fc134c13c014021430147a14c214da1548158e
15d81636169216d0174a179a17de1814188018c8191a1950198e19a619e0
1a261a261a4c1aa41b0a1b6e1bce1bf41c8a1cb01d441dc01dcc1de61dee
1e921eac1eec1f2e1f7e1ff8202e207e20a420ba20ea21142172217e21a0
21c221e42230224822602276228c22a822da236e237a239223aa23c023dc
23f4240c2422243e24a824be24d624ee2504251a2532256025dc25f4260c
2622263e2656269e26f8270a27242740275e278227d82886289228a428bc
28dc2908292829482962298a29ee2a0c2a1e2a382a542a722a962ad02b48
2b682b882ba02bc62be62c422c682c782c842c9a2cc22cce2cda2cf22d0c
2d222d3e2d542d6e2d842da22db82de02e4a2ec62ed82ee42efa2f202f36
2f522f5e2f6a2f802f9e2fb42fd02fe6300e3024303e304a3066307c30ac
31103176318c31aa31bc31c831de31fc32083214322a32463252325e3274
328c329832a4330a332233543360336c338233ac33bc33cc34163452346a
34843490349c34b234d034e03538359435b835c435da3602361e364036c8
376c3784379e37aa37b637cc37ea3802381c3832384e385a3866387c389a
38ac38b838ce38e43926399439aa39c639d839e439fa3a223a543aa43ac0
3ad43ae03aec3b023b1a3b303b463b623b7a3b9a3bb03bd83bee3c043c32
3c9a3cf83d503da03dfe3e163e4e3e5a3e723e8a3ea03ebe3eca3ed63f08
3f143f4c3f843fc43fdc401e4054409c40d441124128413e4148418041ac
41c841e44212421e422a42364242424e425a42664272427e4286428e42b6
42ee42f642fe4306437a4382438a43c243ca43d2441a44224452445a44a2
44aa44b24524452c458245e846044620462c463846444650466846de474a
478c47f4487a48d4491a498c49be49c64a324a3a4a424ab44abc4b0c4b62
4bbe4c164c424c844cec4d6a4dc84e2c4e544e7a4e864e924e9e4f024f74
4fe85000501c507e5096510c5172517a5196519e520a527052c052d852f0
53065344534c539c53a453ac53fe5406546454de5534554a55525596559e
55a655ae55b655be55c655ce561e5684568c56c25702573a577857ca5824
586a58cc595c59b459bc5a325ab05ad85b285b305b905c085c585c805ce6
5d285d865dee5df65e265e2e5e785ea45eac5f345f3c5f705fb25fee6030
608060d8611a6190621a626e628062ac6328634863ca63d263da6402640a
647464d8653a655a657a65a065dc6638669466ee674c67d0686268b86914
697a69f46a646ad06b506bce6c666d166d1e6d266d8e6df86e426e946eb0
6ec66ed26ede6f626fe27098714e71c27238728472cc7302731e73507368
7380748674f0750a7536759075f4765076cc76f87724776277a677fa7844
7850785c786878747880788c78f2796079d47a367a947af27afe7b0a7b7c
7bec7c447c927d327dd07ddc7de87df47e007e087e107e6a7ec67ed27ede
7f247f6a7f767f827fd480288068807c80ee8160816c81788180819681be
821682688274828083028382838e839a83a683b283be83ca83d283e88410
842c8450845884608476849c84fc85128564859285ae85d685f2861c8674
86c686d886e48700872687428766876e8776879287e087fc88208832883e
885a8880889c88b088cc88f288fe890a892a8956896689768982898e89e8
8a408a828a8a8ae28b628bd28c408c9e8cfc8d648dca8e5a8ee68f3e8f90
8fe0902e90a690ae90ba90c690d290de90f691109128914891609180919c
91c491d091dc91f29204921e9234924e92629288929c92c292d692f09310
9328933e9356936a9382939a93b293ce93e894149420942c94429454946a
948a94a494b894d294e6950c95209546955a9574959695ac95be95ca95d6
95e295ee9604961696309644965e9672968c96a096ba96ce96e897089738
97529782979497aa97bc97d297f097fc98089814982098369842985a987a
988698a698bc98ce98e49900990c991899309950995c9968997e998a99a0
99bc99c899c899c899c899c899c899c899c899c899c899c899c899c899d2
99dc99e699fe9a129a269a3a9a469a529a5e9a7e9abe9b209b409b4c9b5c
9c269c2e9c369c4e9c689c749c889cc69d029d0e9d9e9e229e2e9eac9f38
9fa29fb2a012a072a098a0bea0e4a10aa15ca184a1bea1d6a210a290a2d4
a35ea39ea3c8a3f2a42ca44aa4aea4baa4c6a4d6a4d6a6bca702a714a738
a7a8a80ca870a8b4a934a986a9b2a9fcaa36aa86aad6ab3aab72abaeabda
ac46acaead06ad56ada2adf4ae0cae6eae92aefaaf2caf48af96aff2b030
b074b0b4b102b172b18ab1dcb228b266b2a2b312b38ab3e0b452b4cab4da
b504b52eb556b582b5d8b656b69ab6fab762b796b810b876b8b8b91ab97e
b9e0ba22baa0baf2bb48bb72bbbabc1ebc9abcccbcfebd06bd2cbd54bd64
bd8abdbcbdd6bdf6be30be58be74be80bea6bed6bef0bf2abf50bf7ebf9a
bfd6bff6c024c050c07ac098c0d0c0f2c120c13ac170c1a2c1b2c1cac1d6
c202c22cc260c28ac2a2c2b2c2c8c2f2c2fec316c340c35ac38ec39ac3b4
c3d4c400c418c424c44cc476c482c4bec4cac4e0c4f4c522c52ec548c564
c57ec5b4c5e2c5eec606c62ec658c664c68ec69ac6b2c6d0c6e2c6fcc724
c730c748c772c7a0c7dec7fec81ac82600010000040b00970016005f0005
000100000000000e00000200029b000300010000001b014a000100000000
0000001f000000010000000000010006001f000100000000000200070025
0001000000000003001a002c0001000000000004000e0046000100000000
0005001600540001000000000006000e006a000100000000000700200078
000100000000000900060098000100000000000b000a009e000100000000
000c001300a8000100000000000d002e00bb000100000000000e002a00e9
0001000000000012000e00460003000104090000003e0113000300010409
0001000c01510003000104090002000e015d00030001040900030034016b
0003000104090004001c019f0003000104090005002c01bb000300010409
0006001c01e70003000104090007004002030003000104090009000c0243
000300010409000b0014024f000300010409000c00260263000300010409
000d005c0289000300010409000e005402e5466f6e74206461746120636f
7079726967687420476f6f676c652032303132526f626f746f526567756c
6172476f6f676c653a526f626f746f20526567756c61723a32303133526f
626f746f20526567756c617256657273696f6e20312e3130303134313b20
32303133526f626f746f2d526567756c6172526f626f746f206973206120
74726164656d61726b206f6620476f6f676c652e476f6f676c65476f6f67
6c652e636f6d43687269737469616e20526f62657274736f6e4c6963656e
73656420756e6465722074686520417061636865204c6963656e73652c20
56657273696f6e20322e30687474703a2f2f7777772e6170616368652e6f
72672f6c6963656e7365732f4c4943454e53452d322e300046006f006e00
740020006400610074006100200063006f00700079007200690067006800
7400200047006f006f0067006c0065002000320030003100320052006f00
62006f0074006f0052006500670075006c006100720047006f006f006700
6c0065003a0052006f0062006f0074006f00200052006500670075006c00
610072003a00320030003100330052006f0062006f0074006f0020005200
6500670075006c0061007200560065007200730069006f006e0020003100
2e003100300030003100340031003b002000320030003100330052006f00
62006f0074006f002d0052006500670075006c006100720052006f006200
6f0074006f00200069007300200061002000740072006100640065006d00
610072006b0020006f006600200047006f006f0067006c0065002e004700
6f006f0067006c00650047006f006f0067006c0065002e0063006f006d00
430068007200690073007400690061006e00200052006f00620065007200
740073006f006e004c006900630065006e00730065006400200075006e00
640065007200200074006800650020004100700061006300680065002000
4c006900630065006e00730065002c002000560065007200730069006f00
6e00200032002e00300068007400740070003a002f002f00770077007700
2e006100700061006300680065002e006f00720067002f006c0069006300
65006e007300650073002f004c004900430045004e00530045002d003200
2e003000b00c2bb0002b00b20105022b00b7015d4c3b271a00082bb70249
3c2f221300082bb703493c2f221300082bb704382e241a0f00082bb70551
4234251600082b00b20608072bb00020457d691844b2d0080173b2200801
74b230080173b280080173b270080173b25f0a0173b27f0a0173b22f0a01
74b24f0a0174b26f0a0174b28f0a0174b2af0a0174b27f0a0175b2ff0a01
74b21f0a0175b23f0a0175b25f0a0175b23f0a0173b20f0c0173b27f0c01
73b2ef0c0173b21f0c0174b25f0c0174b28f0c0174b2cf0c0174b2ff0c01
74b23f0c0175b26f0c0175b2bf0e0173b22f0e0174b29f0e0174b2bf0e01
74b20f0e0175b22f0e0175b22f100173b25f100173b2ff100173b2cf1001
74b23f120173b20f120173b2b0120173b27f120173b20f120174b25f1201
74b27f120175b2df120174b26f120175b22f120175b23f120175b2ef1201
74b29f120174b21f120174b2ef120173b20f140173b21f140173b22f1401
73b23f140173b25f140173b26f140173b27f140173b2af140173b28f1401
74b2af140174b2bf140174b2cf140174b22f140175b23f14017500>
[16369 16329 16301 16289 16237 16357 4601 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Roboto-Regular AddT42Char 
1 1608 16 <00010023021a020d02b40003001200b0022fb10103b00a2b5821d81bf459
303101213521020dfe1601ea021a9a000000>Roboto-Regular AddT42Char 
1 4672 38 <00010076ffeb04bf05c5001d003b00b0004558b00b2f1bb10b0c3e59b000
4558b0042f1bb104063e59b00b10b11302b00a2b5821d81bf459b00410b1
1a02b00a2b5821d81bf45930310117160023220011111000333200070723
3426232202151114123332363504b90204fed8f3f7fec90137f7f7012404
02bdb4a4a5c4c4a5a4b401d206cdfeec015e010d0103010d015ffef9d906
99b2fef6c5fefbc7fef6b19c0000>Roboto-Regular AddT42Char 
1 5492 43 <000100b40000050105b0000b00a400b0082fb0004558b0062f1bb1060c3e
59b0004558b00a2f1bb10a0c3e59b0004558b0002f1bb100063e59b00045
58b0042f1bb104063e59b27f08015db2cf08015db21f080171b27f080171
b4bf08cf080271b21f080172b26f080172b2bf080172b48f089f080272b2
3f080172b2ef080171b29f080171b24f080171b4ef08ff08025db2af0801
5db25f08015db22f08015db00810b10302b00a2b5821d81bf45930312123
112111231133112111330501c5fd3dc5c502c3c50283fd7d05b0fd6e0292
0000>Roboto-Regular AddT42Char 
1 6124 48 <000100b40000065205b00011008000b0004558b0002f1bb1000c3e59b000
4558b0032f1bb1030c3e59b0004558b0052f1bb105063e59b0004558b00a
2f1bb10a063e59b0004558b00f2f1bb10f063e59b00a10b001d0b4340144
01025db6730183019301035db00010b00cd040096f0c7f0c8f0c9f0c045d
b24f0c015db25c0c015db42b0c3b0c025db008d030310101330133112311
1327012301071311231101b001d00601d0fcc51405fe2883fe2a0513c505
b0fb61049ffa500240025001fb6f048e01fdb3fdc005b000>Roboto-Regular AddT42Char 
1 8760 68 <0002006affeb03f3044e0020002b006f00b0004558b0192f1bb1190a3e59
b0004558b0062f1bb106063e59b0004558b0002f1bb100063e59b20c0619
111239b00c2fb4bf0ccf0c025db01910b11102b00a2b5821d81bf459b214
190c111239b00610b12103b00a2b5821d81bf459b00c10b12602b00a2b58
21d81bf45930312126262706062322263534363333353426232206152327
26363332161511141617253236373523220615141603280a0b0137b166a9
b1fbd7d6746a5f77bc0206ebbab8e00c10fdee6bac1add778f5a314b264e
69ad989baf6b5f6f61440676c4bbb0fdf73a6c34906e47b0785148540000
>Roboto-Regular AddT42Char 
1 9516 72 <00020063ffeb03ed044e0016001f006000b0004558b0072f1bb1070a3e59
b0004558b0002f1bb100063e59b20b0007111239b00b2fb4d00be00b025d
b2a00b015db00010b11002b00a2b5821d81bf459b00710b11702b00a2b58
21d81bf459b00b10b11c02b00a2b5821d81bf45930310522003535340033
3212151521071616333236371706060322060717213534260250e2fef501
13bcdbe0fd42030398896497374d3abea5638c100201f37c15012df02ce7
0133fef8dc7b059cc9393280394c03c8a77e051a749c0000>Roboto-Regular AddT42Char 
1 9880 74 <00020064fe4b03fd044e001d002b006400b0004558b0032f1bb1030a3e59
b0004558b0072f1bb1070a3e59b0004558b00c2f1bb10c083e59b0004558
b01a2f1bb11a063e59b00c10b11303b00a2b5821d81bf459b01a10b12102
b00a2b5821d81bf459b00310b12802b00a2b5821d81bf459303113101233
321617373311140623222627371616333236353506062322023533141633
3236371126262322061564e4c9679c34189df2e44eb54532359649908335
9460c7e4c58a8d597827267a568d8c020901050140534e8dfbc0d0df2b25
991e2583867a44450120e9a3c6514a01f24551ecb900>Roboto-Regular AddT42Char 
1 10112 75 <0001008f0000040006180013004100b0132fb0004558b0032f1bb1030a3e
59b0004558b0072f1bb107063e59b0004558b0102f1bb110063e59b00310
b10c02b00a2b5821d81bf459b22f13015d30310136363332161511231134
262322060711231133015438a363adc1c5737252852bc5c503a94e57d0d8
fd5a02a886804d42fce10618>Roboto-Regular AddT42Char 
1 10244 76 <0002009f00000164061800030007003600b0004558b0022f1bb1020a3e59
b0004558b0002f1bb100063e59b00210b005b00a2b58d81bdc59b10604b0
0a2b5821d81bf459303121231133112335330164c5c5c5c5043a0115c900
0000>Roboto-Regular AddT42Char 
1 10628 79 <0001009f0000016406180003001800b0022fb0004558b0002f1bb100063e
59b22f02015d3031212311330164c5c50618>Roboto-Regular AddT42Char 
1 10676 80 <0001008f0000066f044e0023006f00b0004558b0042f1bb1040a3e59b000
4558b00a2f1bb10a0a3e59b0004558b0232f1bb1230a3e59b0004558b00e
2f1bb10e063e59b0004558b0182f1bb118063e59b0004558b0212f1bb121
063e59b00a10b11302b00a2b5821d81bf459b00410b11d02b00a2b5821d8
1bf459303101173636333216173636333216151123113426232206071511
2311342623220607112311013f0e35a36c6c9b2733a870a5c0c56e6d657d
0bc6716a5a741fc5043a8e4d5564645c6ce3e4fd790289a0858c6b08fd51
0289988d4a43fcdf043a>Roboto-Regular AddT42Char 
1 11036 82 <00020061ffeb042a044e000d001b003800b0004558b0032f1bb1030a3e59
b0004558b00a2f1bb10a063e59b11102b00a2b5821d81bf459b00310b118
02b00a2b5821d81bf4593031133400333200151514002322003533141633
32363535342623220615610104dfe10105fefce0e0fefbc5918f8d92938e
8d910227f00137fecaf116f2fecc0135f1ace0e0ac16aae2e2aa0000>Roboto-Regular AddT42Char 
1 11184 83 <0002008ffe600429044e0011001f005500b0004558b00e2f1bb10e0a3e59
b0004558b00a2f1bb10a0a3e59b0004558b0072f1bb107083e59b0004558
b0032f1bb103063e59b00e10b11502b00a2b5821d81bf459b00310b11c02
b00a2b5821d81bf459303101140223222627112311331736363332121123
342623220607111616333236350429e0c5649735c5971f359e69c9dfc591
8d5578252578578c9001f4eafee14343fdef05da8c4e52fec1fefab8ed4d
43fdf5434bcda200>Roboto-Regular AddT42Char 
1 11556 85 <0001008f000002aa044e000f003e00b0004558b0072f1bb1070a3e59b000
4558b00c2f1bb10c0a3e59b0004558b0052f1bb105063e59b00c10b001b0
0a2b58d81bdc59b48f019f01025d30310127220607112311331736363332
1617028f654e6b1dc5b0132e875816280d038c064a43fcfb043a9e545e07
04000000>Roboto-Regular AddT42Char 
1 11924 87 <00010022ffeb026a053f0017005100b0004558b0012f1bb1010a3e59b000
4558b0152f1bb1150a3e59b0004558b00f2f1bb10f063e59b00110b10302
b00a2b5821d81bf459b00f10b10803b00a2b5821d81bf459b00310b013d0
b014d0303101113315231114163332363717060623222635112335331101
93cdcd3f341129101a16552b788eacac053ffefb92fd6f4c3e0806871217
919b0291920105000000>Roboto-Regular AddT42Char 

1 0 0 <> Roboto-Regular AddT42Char 
Roboto-Regular /CharStrings get begin
/space 3 def
/hyphen 16 def
/C 38 def
/H 43 def
/M 48 def
/a 68 def
/e 72 def
/g 74 def
/h 75 def
/i 76 def
/l 79 def
/m 80 def
/o 82 def
/p 83 def
/r 85 def
/t 87 def
end
Roboto-Regular /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 67 /C put
dup 72 /H put
dup 77 /M put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/TBXNNM+Roboto-Regular /Roboto-Regular findfont ct_VMDictPut
/TBXNNM+Roboto-Regular*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 21{/.notdef}rp /C 4{/.notdef}rp /H 
4{/.notdef}rp /M 19{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g 
/h /i 2{/.notdef}rp /l /m /.notdef /o /p 
/.notdef /r /.notdef /t 139{/.notdef}rp]
TBXNNM+Roboto-Regular nf
TBXNNM+Roboto-Regular*1 [48 0 0 -48 0 0 ]msf
690.208 4860.4 mo
(Homographie Cali-Matte)sh
8 lw
1475.37 4855.97 mo
1758.83 4855.97 li
.113725 .113725 .105882 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Roboto-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Roboto-Regular gcheck setglobal} if
1 1756 19 <00020071ffeb041005c5000d001b003b00b0004558b00a2f1bb10a0c3e59
b0004558b0032f1bb103063e59b00a10b11102b00a2b5821d81bf459b003
10b11802b00a2b5821d81bf4593031011002232202111110123332121127
342623220615111416333236350410f7d7d7faf9d6d7f9c5898282888a82
8287022bfee9fed7012a011601590116012bfed5feea2abdbfbfbdfe55bd
c1c0be000000>Roboto-Regular AddT42Char 
1 1912 20 <000100ba000002a905b00005003600b0004558b0052f1bb1050c3e59b000
4558b0002f1bb100063e59b00510b004b00a2b58d81bdc59b10302b00a2b
5821d81bf459303121231105352502a9c5fed601ef04f0048e360000>Roboto-Regular AddT42Char 
1 9184 70 <00010061ffeb03f6044e001d003800b0004558b00f2f1bb10f0a3e59b000
4558b0082f1bb108063e59b10002b00a2b5821d81bf459b00f10b11702b0
0a2b5821d81bf45930312532363533171604232202353534123332160707
2334262322061515141602476295b10205fefdacecfafbebbef10402b28c
6b9b8584857958068cd90134e92ae70135e0a306638bdfa22aa6dd00>Roboto-Regular AddT42Char 
Roboto-Regular /CharStrings get begin
/zero 19 def
/one 20 def
/c 70 def
end
Roboto-Regular /Encoding get
dup 48 /zero put
dup 49 /one put
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TBXNNM+Roboto-Regular*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one 17{/.notdef}rp 
/C 4{/.notdef}rp /H 4{/.notdef}rp /M 19{/.notdef}rp /a /.notdef 
/c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp 
/l /m /.notdef /o /p /.notdef /r /.notdef 
/t 139{/.notdef}rp]
TBXNNM+Roboto-Regular nf
TBXNNM+Roboto-Regular*1 [21 0 0 -21 0 0 ]msf
1475.09 4842.96 mo
(10cm)
[11.8232 11.833 11.1455 0 ]xsh
999.285 4266.87 mo
1016.97 4312 1068.09 4351.33 1123.82 4369.05 cv
1105.79 4383.03 1065.08 4372.44 1040.79 4372.24 cv
1076.84 4406.45 1120.04 4433.49 1178.1 4445.68 cv
1087.33 4444.91 1018.34 4394.7 983.319 4327.54 cv
992.67 4319.27 1002.31 4342.84 1015.25 4349.89 cv
1034.53 4360.39 1060.27 4360.75 1082.31 4365.86 cv
1011.13 4328.47 951.765 4279.27 954.581 4167.88 cv
971.744 4224.16 1001.96 4267.39 1059.95 4282.84 cv
968.719 4231.21 1000.68 4042.4 1079.11 3995.46 cv
1073.82 4028.64 1051.82 4055.22 1047.18 4084.86 cv
1030.83 4189.32 1097.22 4251.48 1190.87 4257.29 cv
1100.29 4262.72 1041.91 4208.28 1028.02 4126.37 cv
1004.68 4202.66 1039.73 4273.74 1098.27 4289.22 cv
1060.63 4299.16 1019.86 4284.64 999.285 4266.87 cv
cp
ef
1277.09 4369.05 mo
1300.13 4439.05 1339.13 4522.05 1443.13 4490.39 cv
1354.45 4527.75 1267.69 4470.37 1277.09 4369.05 cv
cp
ef
1251.54 4388.21 mo
1283.98 4498.06 1214.07 4605.93 1104.66 4563.83 cv
1210.17 4585.52 1250.49 4491.75 1251.54 4388.21 cv
cp
ef
1270.7 4400.98 mo
1287.68 4496.83 1300.24 4597.08 1385.65 4624.5 cv
1296.61 4613.48 1262.1 4520.27 1270.7 4400.98 cv
cp
ef
1462.29 3998.65 mo
1519.75 4034.35 1554.22 4191.73 1487.83 4254.1 cv
1531.86 4236.39 1581.22 4224.02 1583.62 4164.69 cv
1599.26 4251.81 1538.39 4317.3 1475.06 4346.7 cv
1506.88 4356.14 1547 4346.29 1558.08 4324.35 cv
1533.1 4394.1 1457.13 4440.53 1363.3 4452.07 cv
1425.45 4433.33 1482.29 4409.27 1516.57 4362.66 cv
1488.21 4365.1 1464.41 4354.51 1439.93 4362.66 cv
1485.76 4332.92 1532.82 4304.41 1551.69 4247.71 cv
1522.86 4249.77 1483.01 4268.42 1455.9 4282.84 cv
1485.78 4247.01 1514.84 4195.97 1503.8 4129.57 cv
1474.45 4187.49 1398.15 4198.47 1366.49 4254.1 cv
1374.46 4195.95 1480.42 4170.85 1491.02 4100.83 cv
1496.73 4063.14 1478.67 4030.08 1462.29 3998.65 cv
cp
ef
1178.1 4174.27 mo
1243.66 4142.6 1289.61 4196.79 1340.95 4209.39 cv
1337.58 4221.99 1307.52 4221.32 1296.24 4215.78 cv
1297.23 4211.45 1304.24 4213.13 1309.02 4212.59 cv
1287.47 4199.01 1266.67 4184.68 1235.57 4180.66 cv
1273.15 4219.61 1208.47 4295.51 1232.38 4349.89 cv
1190.15 4313.26 1280.52 4177.46 1178.1 4174.27 cv
cp
ef
1296.24 4263.68 mo
1319.36 4278.06 1315.64 4337.39 1296.24 4353.08 cv
1302.99 4336.21 1304.25 4291.32 1296.24 4263.68 cv
cp
ef
%ADOBeginSubsetFont: Roboto-Bold Initial
ct_T42Dict begin
-0.504 -0.27 1.191 1.059
 256 array 0 1 255 {1 index exch /.notdef put} for  /Roboto-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32baf30164000000cc000000606376
74201e9003b50000012c0000003c6670676d47ec54ab00000168000001bc
676c796635f5a0a90000222000016e2868656164f7b0289f000003240000
0036686865610d180a450000035c00000024686d747896c00e2e00000380
000010286c6f6361054760e4000013a8000008186d617870063803fa0000
1bc0000000206e616d65474505d000001be00000045f70726570204aa604
00002040000001dd67646972000000000000000000000000000304a502bc
00050000059a05330000011f059a0533000003d100660200000002000000
000000000000e00002ef5000205b0000002000000000476f6f670020000d
fffd0862fdd500000862022b2000019f4f010000043a05b0002000200002
002a00e100b500aa00a20094009b0068008c00aa00000015fe600015043a
001505b00015048d00100321000b0348000d029000060618000200000000
b0002c4bb0095058b101018e59b801ff85b0841db109035f5e2db0012c20
20456944b001602db0022cb0012a212db0032c2046b00325465258235920
8a208a49648a204620686164b004254620686164525823658a592f20b000
53586920b000545821b040591b6920b000545821b0406559593a2db0042c
2046b00425465258238a592046206a6164b0042546206a61645258238a59
2ffd2db0052c4b20b0032650585158b080441bb04044591b21212045b0c0
5058b0c0441b2159592db0062c2020456944b001602020457d691844b001
602db0072cb0062a2db0082c4b20b003265358b0401bb000598a8a20b003
2653582321b0808a8a1b8a235920b0032653582321b0c08a8a1b8a235920
b0032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b
8a235920b003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db0092c4b535845441b2121592db00a2cb01c452d
b00b2cb01d452db00c2cb1270188208a5358b94000040063b80800885458
b9001c03e870591bb0235358b02088b810005458b9001c03e8705959592d
b00d2cb04088b820005a58b11d00441bb9001d03e844592d000100000001
0000e8c8cb985f0f3cf50019080000000000c4f0112e00000000ce14cc22
fbf5fdd50988087c000100090002000000000000000100000862fdd50000
094ffbf5ff1708be00010000000000000000000000000000040901fe0000
0000000001fe000001fe0000022d00860290003204c300300497005c05e9
005f0542003d014a003202c7007c02c9001f038c001b045d00380210003f
03210071025400900339fff20497005f049700ab04970047049700410497
003904970069049700630497003c0497005b049700520246009002320072
04130036049d00880422007703fd001d07190031051f000c05220088051d
005d053e008804980088049e00880559006305aa00880259009a0491003a
052b00880454008806fb008805aa00880577005c053600880599005c054a
0088051300550491001c057f007805170007071700180517001f050c0005
04b6004d023a0077035f0002023a000d0380002c0392000102a6004d044c
0037048400700424003e04840043043c004d02dc001b0484004304840069
0223007f021fff9e044900700223007f06ec00700484006b048400430484
00700484004302cd00700420003a02cb0009048400690416001005e3001d
04160013041600050416004b02a40030020700ad02a40022052f006901fe
00000244008e049d004804c0005c0589005004e500160205007f0507005e
0442009c06460056038d0070040100620469007e03210071064600560404
0094031c007e044d005a035c00660358005902d7006c04f0008b0436003d
026b009f02250061023d004e03a900760401006605d500a7061100a706b5
0069040d004b051f000c051f000c051f000c051f000c051f000c051f000c
07850003051d005d049800880498008804980088049800880259ffc60259
00980259ffc00259ffaf055c001f05aa00880577005c0577005c0577005c
0577005c0577005c044000400582005c057f0078057f0078057f0078057f
0078050c000504df0084050e0087044c0037044c0037044c0037044c0037
044c0037044c003706c1002e0424003e043c004d043c004d043c004d043c
004d0232ffb2023200840232ffac0232ff9b04c200300484006b04840043
048400430484004304840043048400430490003f04840043048400690484
0069048400690484006904160005048a007904160005051f000c044c0037
051f000c044c0037051f000c044c0037051d005d0424003e051d005d0424
003e051d005d0424003e051d005d0424003e053e0088051a0043055c001f
04a2004304980088043c004d04980088043c004d04980088043c004d0498
0088043c004d04980088043c004d05590063048400430559006304840043
0559006304840043055900630484004305aa00880484006905a5001004a2
fffa0259ffb70232ffa30259ffc20232ffae0259ffd40232ffc002590029
0223000e025900920232008506ea009a0442007f0491003a0242ffa6052b
00880449007004ba0081045400880223007d045400880223006e04540088
02b9007f0454008802ff007f0410000c0252000f05aa00880484006b05aa
00880484006b05aa00880484006b0484ffe6059e00830484006b0577005c
048400430577005c048400430577005c0484004307c0006107380043054a
008802cd0070054a008802cd006c054a008802cd0021051300550420003a
051300550420003a051300550420003a051300550420003a0491001c02cb
00090491001c02f300090491001c02cbfff3057f007804840069057f0078
04840069057f007804840069057f007804840069057f007804840069057f
0078048400690717001805e3001d050c000504160005050c000504b6004d
0416004b04b6004d0416004b04b6004d0416004b0214007402e4ffce059b
005704a7004305b40078048e00690242ff97051f000c044c003707850003
06c1002e0582005c04840043051300550420003a0242ffac0195003903f8
008903c50063038e006a0275009202aa0081026a005303da0077036c008d
0298009e0000fce90000fcf70000fc7d0000fd1d0000fbf50000fd0602b7
00ee04650099051f000c026b009f04fcff76060eff9f02bdffa8058bfff1
0570ff3e0574ffe602a9ff8f051f000c052200880475008805d600160498
008804b6004d05aa00880582005c0259009a052b00880530001306fb0088
05aa0088048b00620577005c05aa008805360088048b00480491001c050c
000505e3003b0517001f05cb0038056000680259ffaf050c000504820049
0474005f0484006b02a90089048400710482004904d1008e041600100484
00430474005f040a004b0484006b04b9006502a9008904ba0081044e000c
04f0008b0416001004490067048400430531004e04840070041c003e0494
0041043400330484007105f900350449001705f6004406e0005002a9ffac
04840071048400430484007106e000500574007a04b2fff306a000130498
00880498008804750088050a006e051300550259009a0259ffaf0491003a
0879002a087b0088052b0088059c007e050d0024059d007b051f000c0503
007705220088047500880498008805410057059c007e059c007e052b0088
05a7002a06fb008805aa00880577005c05aa008805360088051d005d0491
001c0517001f06210096058f008b06f9009505080056078f009a044c0037
0484007f0357006b043c004d0484006b0484006b047c0081047d000f0615
00810484006b048400430484006b048400700424003e042e003004160005
0416001304df006b047b0067069b006b073f006b06a70095047700810428
003f067e008504840033043c004d043c004d0484fff10357006b04280048
0420003a0223007f0232ff9b021fff9e06eb001906e8006b0484001d047c
00810484006b041600050484006b0503ffe605420012047a0007077f00ad
066600a606f8007105dd006e094f009a080e0085041c00050409001c05cb
003805f60044041600100416ffd1098d005c089a00430582005c04840043
04fd005c0447005604fb006b0390005c03b8006601dc007d01eb006b0814
003707d00049059c007e0484006b0503ffe60472007703b2006b0475fff4
0357ffd2052b0088047c00810547008404a00081053fffc2045dffcd05aa
00880484006b07e3008805a6006b0491001c042e0030050c000504160010
050c0005041600100517001f041600130731002b058c002e058f008b047b
00670572008b047c00670599004e047c005f0690ffee04c9ffbc0259009a
05a7002a047d000f05aa00880484006b05aa00880484006b058f008b047b
006706fb0088061500810259009a051f000c044c0037051f000c044c0037
0785000306c1002e04980088043c004d05e200560439005f05e200560439
005f07f0001206da001905410057041d004604a2005404a20054059c007e
0484006b059c007e0484006b0577005c04840043050800560428003f0416
00050416000504160005058f008b047b0067047500880357006b06f90095
06a7009504cf004b0360004c0517001f041600130517001f041600130503
004c048400430738007206d4005a064f00410524002d04b30042047d006e
07ba004106c9003c07f60085069a005c0510004b043d004605a600200519
00420541006f0474005f05a7002a047d000f051f000c044c003706fb0088
06ec00700717001805e3001d0717001805e3001d0717001805e3001d051f
000c044c0037051f000c044c0037051f000c044c0037051fffa8044cff38
051f000c044c0037051f000c044c0037051f000c044c0037051f000c044c
0037051f000c044c0037051f000c044c0037051f000c044c0037051f000c
044c003704980088043c004d04980088043c004d04980088043c004d0498
0088043c004d0498ff74043cff3a04980088043c004d04980088043c004d
04980088043c004d0259009a02320085025900890223006e0577005c0484
00430577005c048400430577005c048400430577ffd30484ff590577005c
048400430577005c048400430577005c04840043059b005704a70043059b
005704a70043059b005704a70043059b005704a70043059b005704a70043
057f007804840069057f00780484006905b40078048e006905b40078048e
006905b40078048e006905b40078048e006905b40078048e0069050c0005
04160005050c000504160005050c000504160005050c0005041600050577
ff410414000008290000041400000829000002b90000020a0000015c0000
047f00000230000001a2000000d100000000000005850097068600990686
00990391000201950032019500390196003201ad001102e6003202ee0039
02dc0032044e003904a2006202e10087042e009005ef009007ae0059014a
003202900032027f006c026b0050045a00860391001d03a5003603580056
049e001204c0005806e4008d04a20043045c004705e0006403f4001a08c3
007f050e00600510009406d4005a076c005d079c005f0700004e04d7003f
058b00a4050600390471009204830037086000600238ffa5049d0065046c
00880455008d045700890430001f01d4003d04e1001404ff001b07bd001b
07db001b00000000082c00570835005c0227ffa9034600720382005f035e
0057044c00610461002a042d0042041b004d0299003e04950061045c0044
04460007048e001f061d002804a6000f04fc007104340030046f004304a2
008104d5005f04bf006e04c9005b0526008103d3009c0615008103bc0081
048f0081041f001c02270081052a008104e3005f043500810446008104b4
00810496005f04a200810201007d039d006a04d7000f0407005a0407ff10
0407005604070057039d006a039d006b039d006a01db005a026a0021021b
ff9e0344ff9c032f002d0497004e04a20046049f003d049f006e049f006e
03f0000f04be005b049f005604a2008104480042036e0067036e00610380
0040035e0059034d006602aa00900238004e03970067042c00360458004c
039d003002eb0042038e006a04b4ffdf04b4ffdf0434003004d7000f04d7
000f04d7000f04d7000f04d7000f04d7000f04d7000f0496005f04460081
0446008104460081044600810227ffad0227007f0227ffa70227ff960526
008104c9005b04c9005b04c9005b04c9005b04c9005b04fc007104fc0071
04fc007104fc00710446000704d7000f04d7000f04d7000f0496005f0496
005f0496005f0496005f04b4008104460081044600810446008104460081
0446008104e3005f04e3005f04e3005f04e3005f052a00810227ff9e04fc
00710227ffbb0227003d0227007a041f001c048f008103bc005003bc0081
03bc008103bc008105260081052600810526008104c9005b04c9005b04c9
005b04a2008104a2008104a20081046f0043046f0043046f0043046f0043
043400300434003004fc007104fc007104fc007104fc007108de0043045c
0044045c0044045c00440446000704460007061d002804fc007105fc001e
0633002505fd001b07f00012050d0024068b004907a90085082e0085062b
001a0503008404cdffef048f0054050f002106da0019041d004605d90044
05420022078a007b069400630477ffe607240081060a0074058200610484
00410523000d0523000d0788007b0679006c078b007b069400630477ffe6
0508008804820070047d0088043d006b07f0001206da001904ec0057041d
0046069c002505ba003a085d008806ed006b06650061052c0054051d005d
0424003e0611ffee04c9ffbc07f0001206da001905300084049200810582
0061048400410582006104840041050d0024002400240000000000000000
0000002e005c00d2014401d40260027802a202cc02fc03220336034c0366
037e03ce03f8044a04c00502056205ca0600067c06e206f207020724074c
076e07cc087608b6091a096e09b009f60a320a960ada0af60b2e0b7a0ba0
0bf20c300c820cc60d220d840df20e1e0e5c0e8c0edc0f200f580f920fb8
0fd00ff410161028105610dc113c118e11ec125a12ba1330137613a613f0
143a145614c21508155215b21610164a16c017101756178617d418181864
189e18de18f6193419721972199a19f01a581aba1b1a1b421be21c041c94
1d0c1d181d321d3a1dd61dee1e3e1e7a1ece1f601f8c1fdc200220182046
207620c420d020f221142136218c219e21b021c221d421ea220022682274
2286229822aa22c022d222e422f6230c236a237c238e23a023b223c423da
24062478248a249c24ae24c424d6251e257e259025a225b425c625da25f0
26c226ce26e026f227042718272a273c274e276427ce27e027f228042816
2828283c287828e628f8290a291c2930294229a429b829ca29dc29ee2a00
2a0c2a182a2a2a3c2a4e2a602a722a842a962aa82aba2ad02b2e2bae2bc0
2bd22be42bf62c082c1a2c262c322c442c562c682c7a2c8c2c9e2cb02cc2
2cd82cea2cfc2d0e2d7e2de62df82e0a2e1c2e2e2e402e522e5e2e6a2e7c
2e982ea42eb02ec22ed42eea2f002f4c2f5e2f702f862f9c2fb22fc82fd8
2fe83030306e3080309230a830be30d030e230f8315431b231c431d631e8
31fa3210322432ac334e336033723388339e33b033c233d433e633f8340a
3416342234343446345c34723484349434d435363548355a356c357e3590
35a235b835ce35e435f8360436103622363436463658366e3680369236a4
36b636c836da370a378437e23838388238d638e839003918392a393c394e
39603972398439b639c839f43a223a623a783ab23aee3b463b743bb23bca
3be23bec3c243c523c703c863cc03cd23cda3cec3cfe3d103d223d343d46
3d5e3d663d6e3d963dc63dce3dd63dde3e443e4c3e543e843e8c3e943eda
3ee23f123f1a3f663f6e3f763fe23fea404440a440ba40d040e240f44106
4118412e41a24214425042b64320437e43c4442a445c446444c444cc44d4
4548455045a045f8465446a846d44716478047f4485248b848ce48e248f4
49064918497c49e04a4e4a604a764a884aee4b5c4b644b7a4b824bee4c5a
4c6c4c7e4c904cce4cd64d264d2e4d364d3e4dae4dec4dfe4e064e4a4e52
4e5a4e624e6a4e724e7a4e824e8a4ec44f064f604fc25038504050a850d0
50d851165128517251b45200524a52525282528a52d65304530c5314534e
539253d2541e547654b85524559455e655f8560c568e56a0570a5712571a
5730573857a05802586c587e589058a258e25940598e59d65a325a8e5afc
5b625be65c645cfc5da45dac5db45dfc5e125e1e5e2a5e9a5f085f545f9e
5fd45ffc603060486060615461c461da61f0624e627862a862f0632e633a
6346639c63f0645464b464c064cc651a65846590659c65a465ac65f4663c
66486654669e66e666f266fe675267a667e867fc686a68e668ee68fa6906
696069ba69c669d269de69ea69f66a026a0a6a1c6a2e6a446a586a606a68
6a7a6a8c6aec6b026b186b526b686b7e6b946ba86c066c5c6c6e6c806c96
6caa6cc06cd46cea6cfe6d106d246d386d4e6d626d6e6d7a6d906daa6dba
6dce6dda6de66e446e9c6ee06ee86f406fc0703670a47108716871ce7232
729872fe735673a873f8744674b674be74ca74d674e274ee750075127524
75367548755a757075867592759e75b075c275d875ec76027616762c7640
7656766a7680769676ac76c076d676ea77007714772a773e7754776a7776
7782779477a677b877ca77e077f4780a781e78347848785e78727888789e
78b078c278ce78da78e678f279047916792c79407956796a7980799479aa
79be79d479ea79fc7a0e7a207a327a447a567a687a7a7a867a927a9e7aaa
7abc7ace7ae07af27b047b167b287b3a7b4c7b5e7b6a7b767b887b9a7ba6
7bb67bc87bda7bec7bfe7c147c147c147c147c147c147c147c147c147c14
7c147c147c147c1e7c287c327c5e7c767c907ca47cb07cbc7cc87ce87d28
7d8c7dac7db87dc87e8a7e927e9a7eb27ecc7ed87eec7f287f7e7fce8048
80cc80ec817282088274828482d0832e8354837a83a083c6841c8444848c
84a284d68558859c86128652866c868486be86d087448750875c876c876c
8918895e897089988a148a788adc8b208ba68bf68c208c6c8ca68cde8d20
8d6c8d9c8dd88e068e6e8ee28f3a8f8a8fd69014902e907a90a090e6911a
9136918691e4922c927092b092fe9376938e93d294129458949c94fc9556
95b29620969c96ae96e89714973e976897ba982a986c98cc9934996a99e6
9a4c9a8e9aea9b529bae9bee9c6e9cbe9d169d409d889dea9e689e9a9ecc
9ed49ef89f1c9f309f429f549f669f789f8c9fa29fba9fc69fd89fea9ffc
a010a022a034a046a05ca06ea080a092a0a4a0b6a0caa0dca0eea100a114
a126a138a14aa156a168a17aa18ca19ea1b0a1c2a1d4a1e6a1f2a204a216
a228a23aa250a262a274a28aa29ca2a8a2baa2cca2e2a2f4a30aa320a330
a342a358a36aa37ca38ea3a4a3b6a3cca3dea3f0a402a40ea420a436a448
a45aa46ca47ea494a4a0a4b2a4c4a4d6a4eaa4fca50ea51aa580a5d4a626
a696a6e8a756a78ea7cca81ea862a8b6a92ea97ca9e8aa64aaf2ab42ab9a
abf6ac56acdcad7aade6ae60aeacaec2af76b02eb0acb12ab184b1dcb254
b2aab2f4b300b30cb318b324b376b3c8b428b47cb510b5a0b5acb5b8b5c4
b5d0b5e2b5f4b64eb69cb6a4b6acb6c2b6d6b6e8b6feb71400010000040b
00970016005f0005000100000000000e000002000302000300010000001b
014a0001000000000000001f000000010000000000010006001f00010000
00000002000400250001000000000003001700290001000000000004000b
004000010000000000050016004b0001000000000006000b006100010000
000000070020006c00010000000000090006008c000100000000000b000a
0092000100000000000c0013009c000100000000000d002e00af00010000
0000000e002a00dd0001000000000012000b00400003000104090000003e
01070003000104090001000c014500030001040900020008015100030001
04090003002e01590003000104090004001601870003000104090005002c
019d0003000104090006001601c90003000104090007004001df00030001
04090009000c021f000300010409000b0014022b000300010409000c0026
023f000300010409000d005c0265000300010409000e005402c1466f6e74
206461746120636f7079726967687420476f6f676c652032303132526f62
6f746f426f6c64476f6f676c653a526f626f746f20426f6c643a32303133
526f626f746f20426f6c6456657273696f6e20312e3130303134313b2032
303133526f626f746f2d426f6c64526f626f746f20697320612074726164
656d61726b206f6620476f6f676c652e476f6f676c65476f6f676c652e63
6f6d43687269737469616e20526f62657274736f6e4c6963656e73656420
756e6465722074686520417061636865204c6963656e73652c2056657273
696f6e20322e30687474703a2f2f7777772e6170616368652e6f72672f6c
6963656e7365732f4c4943454e53452d322e300046006f006e0074002000
6400610074006100200063006f0070007900720069006700680074002000
47006f006f0067006c0065002000320030003100320052006f0062006f00
74006f0042006f006c00640047006f006f0067006c0065003a0052006f00
62006f0074006f00200042006f006c0064003a0032003000310033005200
6f0062006f0074006f00200042006f006c00640056006500720073006900
6f006e00200031002e003100300030003100340031003b00200032003000
3100330052006f0062006f0074006f002d0042006f006c00640052006f00
62006f0074006f0020006900730020006100200074007200610064006500
6d00610072006b0020006f006600200047006f006f0067006c0065002e00
47006f006f0067006c00650047006f006f0067006c0065002e0063006f00
6d00430068007200690073007400690061006e00200052006f0062006500
7200740073006f006e004c006900630065006e0073006500640020007500
6e0064006500720020007400680065002000410070006100630068006500
20004c006900630065006e00730065002c00200056006500720073006900
6f006e00200032002e00300068007400740070003a002f002f0077007700
77002e006100700061006300680065002e006f00720067002f006c006900
630065006e007300650073002f004c004900430045004e00530045002d00
32002e003000b00c2bb0002b00b20109022b00b701332a241a1000082bb7
023f33241a1000082bb70343372d1f1200082bb70446392d1f1200082bb7
054d3f31231500082bb706493c2f221400082bb7076d5945321a00082bb7
08514233241700082bb70943372b1f1700082b00b20a09072bb00020457d
691844b2d00c0173b2300c0173b2800c0173b2700c0173b2200c0174b23f
0e0173b25f0e0173b27f0e0173b22f0e0174b24f0e0174b26f0e0174b28f
0e0174b2af0e0174b2ff0e0174b21f0e0175b23f0e0175b25f0e0175b27f
0e0175b20f100173b27f100173b2ef100173b21f100174b25f100174b28f
100174b2cf100174b2ff100174b23f100175b26f100175b2bf120173b22f
120174b29f120174b2bf120174b20f120175b22f120175b22f140173b25f
140173b2af140173b2ff140173b24f140174b2cf140174b29f140174b21f
140175b26f140175b29f160173b2ef160173b23f160174b25f160174b2cf
160174b2ff160174b21f160175b23f160175b24f160175b26f160175b25f
180173b27f180173b28f180173b2bf180173b21f180174b24f180174b20f
180175b21f180175b23f180175b24f180175b27f180175b28f180175b22f
1a0173b23f1a0173b27f1a0173b26f1a0173b27f1a0174b2bf1a0174b2ff
1a017400000000>
[16313 16181 16317 16297 16361 12273 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Roboto-Bold AddT42Char 
1 5952 48 <000100880000067205b00011005600b0004558b0002f1bb100103e59b000
4558b0032f1bb103103e59b0004558b0052f1bb1050a3e59b0004558b00a
2f1bb10a0a3e59b0004558b00f2f1bb10f0a3e59b00a10b001d0b00310b0
09d0b00010b00cd030310101330121112111132701230107131121110205
0173060176017efedc1c06fe7ac4fe7c061cfedc05b0fbcf0431fa5001b2
028301fbca043201fd81fe4e05b0>Roboto-Bold AddT42Char 
1 6404 51 <00020088000004e705b0000a0013003e00b0002fb0004558b0032f1bb103
103e59b0004558b0012f1bb1010a3e59b00010b10b01b00a2b5821d81bf4
59b00310b11201b00a2b5821d81bf4593031011121112132001514042325
213236353426232101acfedc0244fb0120fee0fbfee001207a7e7d7bfee0
0210fdf005b0ff00d1d1fee185676989>Roboto-Bold AddT42Char 
1 6724 53 <000200880000051205b0001a0023005200b0002fb0004558b0032f1bb103
103e59b0004558b0012f1bb1010a3e59b0004558b0122f1bb1120a3e59b0
0010b11b01b00a2b5821d81bf459b20a001b111239b00310b12201b00a2b
5821d81bf459303101112111213204151406071616151514161715212626
353534262325333236353426232101acfedc0225f90119767281712128fe
d32818776cfeeafc7b797976feff0246fdba05b0e3cb71a23226b2836b3d
852015209643676d79e1686664760000>Roboto-Bold AddT42Char 
1 7140 55 <0001001c0000047605b00007002f00b0004558b0062f1bb106103e59b000
4558b0022f1bb1020a3e59b00610b10001b00a2b5821d81bf459b004d030
3101211121112135210476fe64fedcfe66045a04cffb3104cfe10000>Roboto-Bold AddT42Char 
1 7228 56 <00010078ffeb050805b00011003600b0004558b0002f1bb100103e59b000
4558b0082f1bb108103e59b0004558b0042f1bb1040a3e59b10d01b00a2b
5821d81bf45930310111140021200035112111141633323635110508febc
fefafefbfebf01259a87899c05b0fc3af5fef6010af503c6fc3a908f8e91
03c60000>Roboto-Bold AddT42Char 
1 8632 69 <00020070ffeb044006180011001f005500b0004558b0092f1bb1091a3e59
b0004558b00e2f1bb10e0e3e59b0004558b0032f1bb1030a3e59b0004558
b0082f1bb1080a3e59b00e10b11501b00a2b5821d81bf459b00310b11c01
b00a2b5821d81bf459303101140223222627072311211136363332121121
342623220607111616333236350440d8cc5e8d3116fa01232f8355ced8fe
dd5d70445e1b1b5f45715a01fff2fede4f4c860618fdaf4146fec9fefd9e
b93935fe3631349f92000000>Roboto-Bold AddT42Char 
1 8824 70 <0001003effeb03f2044e001d004400b0004558b00f2f1bb10f0e3e59b000
4558b0082f1bb1080a3e59b10001b00a2b5821d81bf459b00810b003d0b0
0f10b013d0b00f10b11701b00a2b5821d81bf45930312532363521171606
2322003535340033321607072134262322061515141602364e5e01090304
ffbdf2fefa0105f2c8f50402fef65c51745f5fcb5b4c06a4dd0132f01eef
0134e4ba06546fb48e1e91b10000>Roboto-Bold AddT42Char 
1 9176 72 <0002004dffeb0402044f0016001f006f00b00b2fb0004558b0072f1bb107
0e3e59b0004558b0002f1bb1000a3e59b2ff0b015db28f0b0171b29f0b01
72b21f0b0172b24f0b0171b2bf0b015db45f0b6f0b025db11001b00a2b58
21d81bf459b00710b11701b00a2b5821d81bf459b00b10b11c02b00a2b58
21d81bf45930310522003535340017321215152107161633323637170606
032206071721353426024feafee80109dfdbf2fd7a02087f6d61804c4f42
d69d515e0b0301665715012ce728f1013801fef8e19f066b8a272ab43647
03827c65051a5d6f0000>Roboto-Bold AddT42Char 
1 9824 75 <000100690000041806180013004600b0004558b0122f1bb1121a3e59b000
4558b0032f1bb1030e3e59b0004558b0072f1bb1070a3e59b0004558b010
2f1bb1100a3e59b00310b10c01b00a2b5821d81bf4593031013636333216
1511211134262322060711211121018d33945aa9c1fedc59583c5c1efedc
012403b14a53e1ebfd7e02847e692b27fce70618>Roboto-Bold AddT42Char 
1 9964 76 <0002007f000001a3061800030007003700b0004558b0022f1bb1020e3e59
b0004558b0062f1bb1061a3e59b0004558b0002f1bb1000a3e59b00610b0
05b00a2b58d81bdc593031212111211121352101a3fedc0124fedc012404
3a0103db0000>Roboto-Bold AddT42Char 
1 10628 81 <0001006b0000041a044e0013004600b0004558b0042f1bb1040e3e59b000
4558b0132f1bb1130e3e59b0004558b0082f1bb1080a3e59b0004558b011
2f1bb1110a3e59b00410b10d01b00a2b5821d81bf4593031011736363332
1615112111342623220607112111017b0d369e62a4b8fedb58593a5c1ffe
dc043a9b535ccedcfd5c02a36d5b2f2bfcef043a>Roboto-Bold AddT42Char 
1 10768 82 <00020043ffeb0440044e000d001b003800b0004558b0032f1bb1030e3e59
b0004558b00a2f1bb10a0a3e59b11101b00a2b5821d81bf459b00310b118
01b00a2b5821d81bf4593031133400333200151514002322003521141633
3236353534262322061543010eeff00110fef1eff0fef10123687471696a
7271690227f20135feccf315f4fecd0133f494b3b4931590b6b78f00>Roboto-Bold AddT42Char 
1 11412 86 <0001003affeb03d4044e0027007400b0004558b0092f1bb1090e3e59b000
4558b01d2f1bb11d0a3e59b2171d09111239b479178917025db01710b102
01b00a2b5821d81bf459b20e091d111239b40b0e1b0e025db00910b11102
b00a2b5821d81bf459b2221d09111239b404221422025db01d10b12502b0
0a2b5821d81bf45930310134262726263534363332160707213426232206
151416171616151406232226373721161633323602b95d7ec0c3ebc5cff5
0502fee6535047515582c8c2facdd8fb0602010b036c575155012a30461b
2799848cc3c2940641524534324019289b8892b9db8c06574e40>Roboto-Bold AddT42Char 
1 11648 87 <00010009ffeb029205430017005100b0004558b0012f1bb1010e3e59b000
4558b0152f1bb1150e3e59b0004558b00f2f1bb10f0a3e59b00110b10301
b00a2b5821d81bf459b00f10b10801b00a2b5821d81bf459b00310b013d0
b014d0303101113315231114163332363717060623222635112335331101
cbb6b6342c172116192c543197a39e9e0543fef7cdfdd93f360506d30f0f
a6b40228cd0109000000>Roboto-Bold AddT42Char 
1 12200 91 <0001001300000408043a000c004400b0004558b0022f1bb1020e3e59b000
4558b00b2f1bb10b0e3e59b0004558b0052f1bb1050a3e59b0004558b008
2f1bb1080a3e59b207080b111239b00710b000d030310133132101012103
0321010121020706a6014afeba0151feb7b1b1feb60151feb9014802e201
58fde9fddd0167fe9902230217000000>Roboto-Bold AddT42Char 

1 0 0 <> Roboto-Bold AddT42Char 
Roboto-Bold /CharStrings get begin
/space 3 def
/M 48 def
/P 51 def
/R 53 def
/T 55 def
/U 56 def
/b 69 def
/c 70 def
/e 72 def
/h 75 def
/i 76 def
/n 81 def
/o 82 def
/s 86 def
/t 87 def
/x 91 def
end
Roboto-Bold /Encoding get
dup 32 /space put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 84 /T put
dup 85 /U put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 115 /s put
dup 116 /t put
dup 120 /x put
pop
end
%ADOEndSubsetFont
/TBXNNN+Roboto-Bold /Roboto-Bold findfont ct_VMDictPut
/TBXNNN+Roboto-Bold*1 
[32{/.notdef}rp /space 44{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R 
/.notdef /T /U 12{/.notdef}rp /b /c /.notdef /e 
2{/.notdef}rp /h /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s 
/t 3{/.notdef}rp /x 135{/.notdef}rp]
TBXNNN+Roboto-Bold nf
TBXNNN+Roboto-Bold*1 [72 0 0 -72 0 0 ]msf
818.16 4728.72 mo
(TUMPhoenix   Robotics )sh
%ADOBeginSubsetFont: Roboto-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Roboto-Regular gcheck setglobal} if
1 1656 17 <000100a10000016600ca0003001c00b0004558b0002f1bb100063e59b102
04b00a2b5821d81bf4593031212335330166c5c5ca00>Roboto-Regular AddT42Char 
1 7596 57 <00010016000004f905b00009004400b0004558b0042f1bb1040c3e59b000
4558b0082f1bb1080c3e59b0004558b0062f1bb106063e59b001d0b22401
015d400f3301430153016301730183019301075d30310117333701330123
013302642106210178d5fde3a9fde3d6016a73730446fa5005b0>Roboto-Regular AddT42Char 
Roboto-Regular /CharStrings get begin
/period 17 def
/V 57 def
end
Roboto-Regular /Encoding get
dup 46 /period put
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TBXNNM+Roboto-Regular*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
17{/.notdef}rp /C 4{/.notdef}rp /H 4{/.notdef}rp /M 8{/.notdef}rp /V 
10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 2{/.notdef}rp /l /m /.notdef /o /p 
/.notdef /r /.notdef /t 139{/.notdef}rp]
TBXNNM+Roboto-Regular nf
TBXNNM+Roboto-Regular*1 [48 0 0 -48 0 0 ]msf
1316.21 4860.72 mo
(V1.0)sh
%ADOBeginSubsetFont: Roboto-Light Initial
ct_T42Dict begin
-0.742 -0.27 1.145 1.047
 256 array 0 1 255 {1 index exch /.notdef put} for  /Roboto-Light
Type42DictBegin
[<00010000000c000c000c000c4f532f32b9730122000000cc000000606376
7420181e02be0000012c000000306670676d2fe64eab0000015c000001bc
676c7966ed0f83e4000021c80001778868656164f56a288c000003180000
0036686865610aa508e90000035000000024686d7478116a7c4100000374
000010406c6f636163bd02c6000013b4000008226d617870063d02f40000
1bd8000000206e616d65a126dfb200001bf80000049970726570b5544333
00002094000001336764697200000000000000000000000000030483012c
00050000059a05330000011f059a0533000003d100660200000002000000
000000000000e00002ff5000205b0000002000000000476f6f670000000d
fffd0862fdd500000862022b2000019f4f010000043a05b0002000200002
002a006600570068008c00aa010100d600000015fe600015043a001405b0
0015048d00100321000b0618000200000000b0002c4bb0095058b101018e
59b801ff85b0841db109035f5e2db0012c2020456944b001602db0022cb0
012a212db0032c2046b003254652582359208a208a49648a204620686164
b004254620686164525823658a592f20b00053586920b000545821b04059
1b6920b000545821b0406559593a2db0042c2046b00425465258238a5920
46206a6164b0042546206a61645258238a592ffd2db0052c4b20b0032650
585158b080441bb04044591b21212045b0c05058b0c0441b2159592db006
2c2020456944b001602020457d691844b001602db0072cb0062a2db0082c
4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a23
5920b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a
1b8a235920b0032653582321b801408a8a1b8a235920b003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db009
2c4b535845441b2121592db00a2cb016452db00b2cb017452db00c2cb127
0188208a5358b94000040063b80800885458b9001603e870591bb0235358
b02088b810005458b9001603e8705959592db00d2cb04088b820005a58b1
1700441bb9001703e844592d00010000000100005e2a81cd5f0f3cf50019
080000000000c4f0112e00000000ce14cc29fa0cfdd5092c086200000009
0002000000000000000100000862fdd5000008a6fa0cfe5d083400010000
000000000000000000000000041001f200000000000001f2000001f20000
024c007f04f60043046f007405ea006e04ec005b015c00740280008c028c
00120365001d0484004b01880053024a003101e900a7032d001e04aa0087
046f00bc046f006a046f0063046f0045046f00a9046f0098046f004d046f
0064046f005901b2009a01b6006a0417004d047b00950425007c03a2004e
074e006704ff002004f500bf05210084054000bf049c00bf049d00bf0579
009205a800bf022a00d90467004d051c00bf043700bf06ef00bf05ae00bf
0562007c04f300bf0563007c054400bc04cf005f04bd002d055e00a704ef
0020072a003904e8003b04dc002104c8005f01eb00a30327003001eb0000
0354004d037400010249005d044d00670474009d042500610474006f041f
005c02a100420475006f0474009e01d100ad01e4ff8d03ee009f01d100ad
071700980474009e0474005b0474009d0474006f02b9009e0413006802a8
00260474009a03ea002c060e004103ea003203ea002303ea005a02a40044
01c400b202a40009057a008f01c40091045b007a0492004305c9006d04c7
002d01bc009f04d7006703bf00a20665006b038a008703a5007b045d007c
066a0066036a006a0306008f043e00550343007603540073024000740474
00a203cd005201f700a601f2006201ff0057039a008703a00082061900a0
061f00a006b0008c03be006c074900110430005d0563007c04be00b704b0
009706c4004d04a70063048c00480475005b047f00a10584001901c800a8
045700a2042c00170211001a059a00b60474009d0779006c0764005e01d1
00a7029effc50595008b047a005b057300a704b9009a01d4ff8c041f005c
037000a0034400880361008b01e7009d02a400ab0200005b037c00660305
0086028f00b80000fd0e0000fda00000fcaf0000fd6d0000fc350000fd69
020700c003d500a301f700a6046a00bb0593002d0563007c052f00450479
007505a900bf0479003f05b80059058e007c053d00780481006f04bd00b1
03ea002c0474005b0459006b03fc00490474009e04960086026600b60474
00360416006304c400510474009e0447006f0474005b0417004d0474009b
057c0071044400400578007906de008404eb0085044affd7064a003805f4
00360549008c089d003408a200bc066f003705a400bc050500b305ca0048
070a001704c2005c05ae00bf059e00290505003905f1004d05b500b60553
00ad076800b8078b00b80632fff606ae00bb04e600b3054800a1074800d7
04e4006104670061047900a9035f00a3049600350623001c040d0064047f
00a4042500a30481002a05d900a9047f00a4047f00a403de003005cc006f
048e00a40442006e065900a4066b009f050a0023060200a9044800a90447
0070068100a90458005d0475ffe50447006e06d6002406e400a40475fff0
047f00a4071a00ac0696009d0447ffe3072600d805f300a604cd00260438
0019070600ea060600c90685009e05a7009e08a600d7076b00a8041e0075
03e0005e0563007c0486005b04ed001d03f1002c0563007c0475005b0710
00ac0663008d071a00ac0697009d05100084042f006f04e100880000fca3
0000fc7f0000fd740000fda70000fa0c0000fa290447ffe3050e00bb0484
009d046300b30381009f049e00bb03fb009f04e800b5045200a206760051
05470033081000bc05cb009f082800b306d1009f05f2007c04c0007606f2
0023053b001d054e00ad04660098054e00a8060a002904b8fff804e800b5
043800a205a300bc0474009e0599007d043b0088049b0072049b0072048d
001a034a00110495004c063f004c06df006f065100330526002e04440062
0402007107bc00420670003307cb00bf069c009604f100890418007505a8
0021051b0043054800920414000008290000041400000829000002b90000
020a0000015c0000047f00000230000001a2000000d10000000000000586
00b0068300b703a0002c016c005b016c005b0161005b016d004a0264005b
0269005b0251005b04670043048200540296009203a100bc052100bc07ce
005c0261006c026100650396003e03a2004d035e007b04920043068b00b9
0431005005e2007603b9005b08c500b804f000600512009506a4007e072a
006c0755006d06c5006804a00063054200ae049e003f049000a5045e0040
0874007b0207ff8b04820065041c0095042900a104280091040a003701e7
008d044c003000000000082e00580835005c0468003c03a100480489007f
02f5002002ffffa001d1ff8d01e500450194008e039f008b037d008b0382
008b03790073040900730375ff91035e0062039f007601c6009704990035
046100a80482007f049200a8042b00a8041000a804ba007f04da00a801c8
00a803f7004f044800a803a100a805dc00a8050800a804c9007f04d8007f
049300a8046200690417004804f9009c04a7003a0612004e049e007b0451
002d0431004b046a008b023d004b03c9005f03fa0063044c0048040b0071
041c0087047f0072042000700422005f0208005803360076035300730369
005403680081036d008b02f000580375007f03660071039f00900360007d
02a400b00300007e048d0050049e00bc048d00a703f300200437003c04bf
0082048d0068046100a804ab006f0361008b01f20000024a0031055e0044
055e00440492002104bd002d02a8001404ff002004ff002004ff002004ff
002004ff002004ff002004ff002005210084049c00bf049c00bf049c00bf
049c00bf022afff7022a00ca022a0003022affda05ae00bf0562007c0562
007c0562007c0562007c0562007c055e00a7055e00a7055e00a7055e00a7
04dc0021044d0067044d0067044d0067044d0067044d0067044d0067044d
006704250061041f005c041f005c041f005c041f005c01c8ffc601c80099
01c8ffd201c8ffa90474009e0474005b0474005b0474005b0474005b0474
005b0474009a0474009a0474009a0474009a03ea002303ea002304ff0020
044d006704ff0020044d006704ff0020044d006705210084042500610521
00840425006105210084042500610521008404250061054000bf050a006f
049c00bf041f005c049c00bf041f005c049c00bf041f005c049c00bf041f
005c049c00bf041f005c057900920475006f057900920475006f05790092
0475006f057900920475006f05a800bf0474009e022affbe01c8ff8d022a
ffc601c8ff95022afff701c8ffc6022a004301d10016022a00c8069100d9
03b500ad0467004d01d4ff8c051c00bf03ee009f043700b101d1009f0437
00bf01d10082043700bf026700ad043700bf02ad00ad05ae00bf0474009e
05ae00bf0474009e05ae00bf0474009e0474fff00562007c0474005b0562
007c0474005b0562007c0474005b054400bc02b9009e054400bc02b90079
054400bc02b9008504cf005f0413006804cf005f0413006804cf005f0413
006804cf005f0413006804cf005f0413006804bd002d02a8002604bd002d
02a8002604bd002d02d00026055e00a70474009a055e00a70474009a055e
00a70474009a055e00a70474009a055e00a70474009a055e00a70474009a
072a0039060e004104dc002103ea002304dc002104c8005f03ea005a04c8
005f03ea005a04c8005f03ea005a0749001106c4004d0563007c0475005b
0492ffed0492ffed04170048049900350499003504990035049900350499
003504990035049900350482007f042b00a8042b00a8042b00a8042b00a8
01c8ffc501c8009801c8ffd101c8ffa8050800a804c9007f04c9007f04c9
007f04c9007f04c9007f04f9009c04f9009c04f9009c04f9009c0451002d
0499003504990035049900350482007f0482007f0482007f0482007f0492
00a8042b00a8042b00a8042b00a8042b00a8042b00a804ba007f04ba007f
04ba007f04ba007f04da00a801c8ff8c01c8ff9401c8ffc501c8001101c8
009803f7004f044800a803a1009903a100a803a100a803a100a8050800a8
050800a8050800a804c9007f04c9007f04c9007f049300a8049300a80493
00a804620069046200690462006904620069041700480417004804f9009c
04f9009c04f9009c04f9009c04f9009c04f9009c0612004e0451002d0451
002d0431004b0431004b0431004b08c4006904ff00200500fff4060c0011
028e00210576003b0540ff95055100580266ffb004ff002004f500bf049c
00bf04c8005f05a800bf022a00d9051c00bf06ef00bf05ae00bf0562007c
04f300bf04bd002d04dc002104e8003b022affda04dc00210481006f0459
006b0474009e026600b60474009b045700a20474005b047400a203ea002c
0266ffba0474009b0474005b0474009b06de0084049c00bf046a00bb04cf
005f022a00d9022affda0467004d051c00bf051c00bf0505003904ff0020
04f500bf046a00bb049c00bf05ae00bf06ef00bf05a800bf0562007c05a9
00bf04f300bf0521008404bd002d04e8003b044d0067041f005c047f00a4
0474005b0474009d0425006103ea002303ea0032041f005c035f00a30413
006801d100ad01c8ffa901e4ff8d042500a303ea0023072a0039060e0041
072a0039060e0041072a0039060e004104dc002103ea0023015c0074024c
007f039c009e0472004201d4ff8c016c005b06ef00bf0717009804ff0020
044d00670562ff5106ed004207130042049c00bf05ae00bf041f005c047f
00a4058e007c0578007904ed001d03f10005085e005b094c007c04c2005c
040d0064052100840425006104dc002103ea002c022a00d9070a00170623
001c022a00d904ff0020044d006704ff0020044d00670749001106c4004d
049c00bf041f005c0599007d043b0088070a00170623001c04c2005c040d
006405ae00bf047f00a405ae00bf047f00a40562007c0474005b0563007c
0486005b0563007c0486005b054800a1044700700505003903ea00230505
003903ea00230505003903ea0023055300ad0442006e06ae00bb060200a9
04e8003b03ea00320474006f059e00290481002a04ff0020044d006704ff
0020044d006704ff0020044d006704ff0020044dfff904ff0020044d0067
04ff0020044d006704ff0020044d006704ff0020044d006704ff0020044d
006704ff0020044d006704ff0020044d006704ff0020044d0067049c00bf
041f005c049c00bf041f005c049c00bf041f005c049c00bf041f005c049c
0049041f000c049c00bf041f005c049c00bf041f005c049c00bf041f005c
022a00c801c80097022a00c601d100990562007c0474005b0562007c0474
005b0562007c0474005b0562007c047400200562007c0474005b0562007c
0474005b0562007c0474005b0595008b047a005b0595008b047a005b0595
008b047a005b0595008b047a005b0595008b047a005b055e00a70474009a
055e00a70474009a057300a704b9009a057300a704b9009a057300a704b9
009a057300a704b9009a057300a704b9009a04dc002103ea002304dc0021
03ea002304dc002103ea00230492006f0492006f051c00bf042500a305a8
00bf047f00a404bd002d03de003004e8003b03ea0032055300ad0442006e
055300ad0442006e046a00bb035f00a3070a00170623001c060a002904b8
fff80474009e04e6fffd04e6fffd046a002b035f00000530fff70402000b
05ae00bf047f00a405a800bf047f00a406ef00bf05d900a9059e00290481
002a04dc002103ea002c04e8003b03ea00320459006b049d001f068300b7
01ce009e00000000000000000000002c009e012a01b8025a027802a202cc
03100336034e03660380039803e60416046a04e00526058c05f4062a06a6
070c07220738078007b207f808560904094609aa0a000a460a8a0ad20b38
0b880ba40bda0c2c0c500ca00cdc0d2e0d720dd00e320e9e0eca0f060f34
0f8c0fd41004103c1062107a109e10c810e41108118a11f0124012a41302
136c13ee1436146614ae14f81514158615d0161c168216e61726179817ee
1834186418b81902194a198219c419dc1a1e1a601a881af21b601bc21c24
1c441cf01d1e1db41e321e3e1e5c1f061f1c1f5c1f9a1fac1fbe1fe22036
2060207620b220c4210a21162130214a216421bc223a226822e623342392
245024dc2512258c25f22654267026c0270c274a27a42802288829202966
29e62a502ab62b0c2b702ba22c042c362c682c8e2ca82ce22d122d442d74
2db82dd02de82df22e242e542e722e8a2ebe2eca2ef22f222f9e2fcc3016
3046308430f0314831a83220329032c4333e33b6340e345834d23504356c
35e43632368e36ec3748377437b63820389a38fc396a39d03a2e3aa43b06
3b7c3bec3c5c3cae3cf03d403d963e063e803ebc3f003f483fb23fee4030
406c40b64108416041a4420a429842ec435843b843e0443444a845164552
45a845ec4636468446b446e0477847b447f6482e487848ca4922496649ca
4a384a8e4b0e4b704bd84c3a4ca24ce64d464da64e0e4e904f0c4f5a4faa
5016508650f4515e51ea5272531c53dc545054b254f4553a55a8561656e6
57ac583c58d65928597659ac59c659fa5a0e5a225b1c5b8c5bee5c445cb8
5ce85d185d6c5dc05e1a5e7a5ed65f305f8c5fe86046609e613061c0620a
625662ac6300634263b4641e648064ce651c658465de6640669066d466e4
66f4673a6798682268946906699a6a0a6a726ada6b506bc86c246c7a6cca
6d1a6d8a6d8a6d8a6d8a6d8a6d8a6d8a6d8a6d8a6d8a6d8a6d8a6d8a6d94
6d9e6db46dd26df06e086e1c6e346e4c6e726eb26f106f2c6f386f48700e
7026703e7052709c7102718e721c729a733673a073be74147474748e74a8
74c274dc7538755e75a275ba75ee767c76d8777877c477e27800783a7852
78ce78ce7a387a8a7ad47b067b547b847bb67be27c187c2a7cd47d4e7db0
7e3e7e8e7ece7f0e7f767f927fd28042809480d6811c816a81d282148230
826682b682da8324836083ac8404846a84d48500853c856a85be86388668
86a086ea8716876c87ea8832889a8902895a89d68a3c8a688ac28b428b88
8bee8c568c888d0c8d768dbe8de28e468e788ebe8f248f908fc6907e90fa
916491a89210921892189220928692ec935493989408941a942c943e9450
9466947c949494a094b294c494d694ec94fe951095229538954a955c956e
9580959295a895ba95cc95de95f496069618962a963c964e966296789690
969c96ae96c096d296e696f8970a971c9732974497569768977a978c97a0
97b297c497d697ea97fc98109822983498469858986498709882989498a6
98b898ca98dc98ee990099129928993a994c995e99709982999499a099ac
99be99d099e299f49a069a189a2a9a3c9a489a5a9a6c9a809a929aa49ab6
9ac89ada9aec9af89b049b169b229b2e9b409b529b5e9b6a9b7c9b8e9b9a
9ba69bbc9bd29be29bf29c049c169c229c2e9c409c529c689c7a9c8c9c9e
9cb09cc69cdc9cee9d009d0c9d189d2a9d3c9d4e9d609d729d849d909d9c
9da89db49dc69dd89de49df09dfc9e089e1a9e309e429e549e669e789e8a
9e9c9eb29ec89ede9ef49f009f0c9f1e9f309f429f549f6a9f7c9f8e9fa0
9fb29fc49fd69fe89ffaa00ca01ea038a052a068a07aa08ca09ea0b0a0c4
a0daa0f2a0fea110a122a134a148a15aa16ca17ea194a1a6a1b8a1caa1dc
a1eea202a214a226a238a24ea260a272a284a290a2a2a2b4a2c6a2d8a2ea
a2fca30ea320a32ca33ea350a362a374a380a392a3a4a3b6a3c8a3d4a3e6
a3f8a404a416a422a438a448a45aa466a478a48aa49ca4b2a4c4a4d0a4e2
a4f4a506a512a524a530a542a554a566a578a58ea5a4a5b0a5c2a5d4a5e8
a5faa60ca61ea62aa636a642a64ea65aa666a672a67ea696a69ea6a6a6ae
a6b6a6bea6c6a6cea6d6a6dea6e6a6eea6f6a6fea706a71ca732a744a756
a768a77aa792a79aa7a2a7aaa7b2a7c8a7dca7eea800a812a828a83aa8a6
a8aea8c4a8cca8d4a8e6a8f8a900a908a910a918a92aa932a93aa942a94a
a952a95aa962a96aa972a97aa98ca994a99ca9eca9f4a9fcaa10aa22aa2a
aa32aa48aa50aa62aa74aa86aa98aaaaaabcaad2aae8aafaab0cab1eab36
ab42ab4eab60ab72ab84ab96aba2abaeabc0abccabdcabeeac00ac12ac24
ac2cac34ac4aac60ac6cac78ac84ac90ac9caca8acb0acb8acc0acd2ace4
acecacfead10ad26ad3aad42ad4aad5cad6ead84ad98adaeadc4addaadee
ae00ae12ae28ae3cae52ae66ae6eae76ae8caea0aeb6aecaaedcaeeeaf04
af18af2eaf44af5aaf6eaf88afa2afaeafbaafc2afceafdaafe6aff2b004
b016b02cb040b056b06ab080b094b0aab0beb0d4b0eab100b114b12ab13e
b154b168b17eb192b1a8b1beb1cab1d6b1e8b1fab20cb21eb234b24ab260
b274b28ab29eb2b4b2c8b2deb2f4b306b318b324b330b33cb348b35ab36c
b382b398b3aeb3c4b3dab3f0b406b41cb432b448b45ab46cb47eb490b4a2
b4b4b4c6b4d8b4e4b4f0b4fcb508b51ab52cb53eb550b562b574b586b598
b5aab5bcb5c8b5d4b5e0b5ecb5feb610b622b634b6b6b6ceb6dab6e6b6f2
b6feb70ab716b722b72eb73ab746b752b75eb76ab776b782b78eb79ab7a6
b7aeb80eb870b8b0b8f0b95ab9bcb9d2b9e8b9f4ba00ba0cba18ba24ba30
ba78bac8bb20bb78bb80bb8cbb96bbc4000000010000041000970016005f
0005000100000000000e0000020001fc000300010000001e016e00010000
00000000001f00000001000000000001000c001f00010000000000020007
002b0001000000000003001800320001000000000004000c001f00010000
000000050016004a0001000000000006000c006000010000000000070020
006c00010000000000090006008c000100000000000b000a009200010000
0000000c0013009c000100000000000d002e00af000100000000000e002a
00dd0001000000000012000c001f0003000104090000003e010700030001
04090001001801450003000104090002000e015d00030001040900030030
016b0003000104090004001801450003000104090005002c019b00030001
04090006001801c70003000104090007004001df0003000104090009000c
021f000300010409000b0014022b000300010409000c0026023f00030001
0409000d005c0265000300010409000e005402c10003000104090010000c
03150003000104090011000a0321000300010409001200180145466f6e74
206461746120636f7079726967687420476f6f676c652032303132526f62
6f746f204c69676874526567756c6172476f6f676c653a526f626f746f20
4c696768743a3230313356657273696f6e20312e3130303134313b203230
3133526f626f746f2d4c69676874526f626f746f20697320612074726164
656d61726b206f6620476f6f676c652e476f6f676c65476f6f676c652e63
6f6d43687269737469616e20526f62657274736f6e4c6963656e73656420
756e6465722074686520417061636865204c6963656e73652c2056657273
696f6e20322e30687474703a2f2f7777772e6170616368652e6f72672f6c
6963656e7365732f4c4943454e53452d322e300046006f006e0074002000
6400610074006100200063006f0070007900720069006700680074002000
47006f006f0067006c0065002000320030003100320052006f0062006f00
74006f0020004c00690067006800740052006500670075006c0061007200
47006f006f0067006c0065003a0052006f0062006f0074006f0020004c00
69006700680074003a003200300031003300560065007200730069006f00
6e00200031002e003100300030003100340031003b002000320030003100
330052006f0062006f0074006f002d004c00690067006800740052006f00
62006f0074006f0020006900730020006100200074007200610064006500
6d00610072006b0020006f006600200047006f006f0067006c0065002e00
47006f006f0067006c00650047006f006f0067006c0065002e0063006f00
6d00430068007200690073007400690061006e00200052006f0062006500
7200740073006f006e004c006900630065006e0073006500640020007500
6e0064006500720020007400680065002000410070006100630068006500
20004c006900630065006e00730065002c00200056006500720073006900
6f006e00200032002e00300068007400740070003a002f002f0077007700
77002e006100700061006300680065002e006f00720067002f006c006900
630065006e007300650073002f004c004900430045004e00530045002d00
32002e00300052006f0062006f0074006f004c0069006700680074000000
b00c2bb0002b00b20107022b00b7016f5b47311d00082bb702826a533b1d
00082bb7036d5945321300082bb704514233240d00082bb70543372b1f0d
00082bb7062f261f190d00082bb707392e221f0d00082b00b20807072bb0
0020457d691844b2300a0173b2700a0173b2800a0173b2d00a0173b2200a
0174b23f0c0173b25f0c0173b27f0c0173b22f0c0174b24f0c0174b26f0c
0174b28f0c0174b2af0c0174b2ff0c0174b21f0c0175b23f0c0175b25f0c
0175b27f0c0175b20f0e0173b27f0e0173b2ef0e0173b21f0e0174b25f0e
0174b28f0e0174b2cf0e0174b2ff0e0174b23f0e0175b26f0e0175b2bf10
0173b22f100174b29f100174b2bf100174b20f100175b22f100175b25f12
0173b2ff120173b2cf120174b24f120174b22f120173b22f140173b23f14
0173b27f1401730000>
[16325 16289 16309 16341 16361 14517 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Roboto-Light AddT42Char 
1 1264 10 <0001008cfe31026d06590011000900b0032fb00d2f303113100037171706
02111510121707232600118c0116ab061a91d8d8911a06adfeec024c016b
024062014967fdf2feb514feb5fdf26b4664023401740000>Roboto-Light AddT42Char 
1 1348 11 <00010012fe3101f206590011000900b0032fb00d2f303101100007232736
121135100227373316001101f2feecac061a90d9dd8c1a06aa0116023dfe
8cfdcc6446660212014c1401490215664662fdc0fe950000>Roboto-Light AddT42Char 
1 1644 14 <00010053fefe010f00bc0005001000b0042fb001b00a2b58d81bdc593031
250323133533010f6a52457712feec0117a7>Roboto-Light AddT42Char 
1 1692 15 <00010031023a0210029f0003001200b0022fb10101b00a2b5821d81bf459
3031012135210210fe2101df023a65000000>Roboto-Light AddT42Char 
1 1996 19 <000100bcfff902a605b40005003d00b0004558b0052f1bb1050e3e59b000
4558b0002f1bb100083e59b00510b004b00a2b58d81bdc59b10302b00a2b
5821d81bf459b2020305111239303105231105352502a678fe8e01ea0705
3a2b54580000>Roboto-Light AddT42Char 
1 2092 20 <0001006a0000041105c5001a004f00b0004558b0112f1bb1110e3e59b000
4558b0002f1bb100083e59b11a01b00a2b5821d81bf459b002d0b2031100
111239b01110b10901b00a2b5821d81bf459b01110b00cd0b21700111112
393031212135013636353426232206152327263633321615140607011721
0411fc7801dd846d998ca6ac6f0205f6d2bce29787fe6f0202ee5c021d95
c95c88a4b89a06b6fcd8b678f798fe3a0500>Roboto-Light AddT42Char 
1 2260 21 <00010063ffeb03f405c5002a007100b0004558b00f2f1bb10f0e3e59b000
4558b01b2f1bb11b083e59b2001b0f111239b0002fb25f00015db22f0001
5db00f10b10701b00a2b5821d81bf459b00f10b00ad0b00010b12a01b00a
2b5821d81bf459b2152a00111239b01b10b020d0b01b10b12301b00a2b58
21d81bf45930310133323635342623220615232726363332161514060716
161514062322243737331416333236353426232301938b9fa49a988cb370
0205f8bec3e780748887fbc5bffeee050270c1999baeb6a98b03199f7d88
a2a58706aae2d6be67b52c27b97ec2ded9c1068bb0a196999300>Roboto-Light AddT42Char 
1 2496 22 <000200450000044b05b0000a000f004900b0004558b0092f1bb1090e3e59
b0004558b0042f1bb104083e59b2010409111239b0012fb10201b00a2b58
21d81bf459b006d0b00110b00bd0b208020b111239b00910b00dd0303101
3315231123112135013301211127070367e4e477fd55029f83fd6c021d06
3301d565fe9001704403fcfc25033e026d000000>Roboto-Light AddT42Char 
1 2636 23 <000100a9ffeb040805b0001f006400b0004558b0012f1bb1010e3e59b000
4558b00e2f1bb10e083e59b00110b10301b00a2b5821d81bf459b2080e01
111239b0082fb01fd0b2051f08111239b00e10b013d0b00e10b11601b00a
2b5821d81bf459b00810b11c01b00a2b5821d81bf4593031131321152103
3636373612151402232226373733141633323635342623220607bd5102c3
fda336378471bae4dddeb4f005026ba78ba2a1a1918c93210293031d6ffd
f932360303ff00d8ddfef8c9c506939cc4baa3c5595a0000>Roboto-Light AddT42Char 
1 2840 24 <00020098ffeb041f05c5001a0027005100b0004558b0002f1bb1000e3e59
b0004558b0142f1bb114083e59b00010b10701b00a2b5821d81bf459b20e
1400111239b00e2fb11b01b00a2b5821d81bf459b01410b12201b00a2b58
21d81bf45930310132161707262623220615153636333212151402232200
111134001322060715141633323635342602874b92391f39704ea2d53cba
71c4e4f5c4c9fefb011ea979b521c09692afaa05c5222062201efccd814e
5efef2d9d7fee8012c0105016ffc013efd9a7e636bd1f2e5a5afd600>Roboto-Light AddT42Char 
1 3404 27 <00020059ffeb03e505c5001a0027004e00b0004558b00d2f1bb10d0e3e59
b0004558b0142f1bb114083e59b10001b00a2b5821d81bf459b207140d11
1239b0072fb11b01b00a2b5821d81bf459b00d10b12201b00a2b5821d81b
f45930312532363535060623220235341233321211111400232226273716
161332363735342623220615141601ffa6c435b36ec7f3ffbcd3fefef4da
4e9d471644856782af25b59b8db7ac50decf925c640114dbdd012afeedfe
fafe53fdfee91e1f64201c01e485629acfdbf4ada8e20000>Roboto-Light AddT42Char 
1 3840 31 <0002009501a603d703ab00030007003c00b20106032bb410012001025db2
10010171b00110b10201b00a2b5821d81bf459b210060171b21006015db0
0610b10501b00a2b5821d81bf4593031012135211121352103d7fcbe0342
fcbe034203416afdfb6a>Roboto-Light AddT42Char 
1 9184 69 <00010061ffeb03cd044e001d004400b0004558b00f2f1bb10f0c3e59b000
4558b0082f1bb108083e59b10001b00a2b5821d81bf459b00810b003d0b0
0f10b014d0b00f10b11701b00a2b5821d81bf45930312532363533171606
23220235353412333216070723342623220615151416022f77b66a0205fa
a4ddf1f2dbb2ed04026baf7faea7a65088790696ca012fee2aec0130d2ab
06829bf9bd2ac0f80000>Roboto-Light AddT42Char 
1 9344 70 <0002006fffeb03d306180011001f006000b0004558b0072f1bb107143e59
b0004558b0032f1bb1030c3e59b0004558b0092f1bb109083e59b0004558
b00e2f1bb10e083e59b206030e111239b20b0e03111239b11501b00a2b58
21d81bf459b00310b11c01b00a2b5821d81bf45930311310123332161711
3311232706062322023533141633323637112626232202156fdbc471a637
776a0a36aa73c2db789d9e749b2b2996799e9f02140103013760580282f9
e89d565c0121f3c4e8685c01fc5e75fefdcf0000>Roboto-Light AddT42Char 
1 10792 79 <000100980000067f044e0025007100b0004558b0002f1bb1000c3e59b000
4558b0042f1bb1040c3e59b0004558b00a2f1bb10a0c3e59b0004558b00e
2f1bb10e083e59b0004558b01a2f1bb11a083e59b0004558b0232f1bb123
083e59b2011a04111239b207041a111239b00a10b11301b00a2b5821d81b
f459b01fd030310117363633321617363633321615112311342623220607
14161511231134262322060711231101030b34ad787ca72431b582adbc78
8d7e8b981201798f7d7f951e79043ab35f68787b7281e6f1fd890279c8a5
ae88071a06fd770279c4a9816dfd08043a00>Roboto-Light AddT42Char 
1 12656 90 <00010032000003b4043a000b005300b0004558b0012f1bb1010c3e59b000
4558b00a2f1bb10a0c3e59b0004558b0042f1bb104083e59b0004558b007
2f1bb107083e59b2000a07111239b206070a111239b2030600111239b209
0006111239303101013301012301012301013301f201258efe91017e8cfe
ccfecc8e017ffe918d028001bafdedfdd901cdfe3302270213000000>Roboto-Light AddT42Char 
1 12804 91 <00010023fe4b03ca043a0015003d00b0004558b0032f1bb1030c3e59b000
4558b0142f1bb1140c3e59b0004558b0082f1bb1080a3e59b20108141112
39b10f01b00a2b5821d81bf4593031011733013301060623222627371616
3332363737013301d12606014786fe2a2a8681153c0e0e0c350c4e5e2139
fe5e850125810396fb196e9a09056402056f5792042c0000>Roboto-Light AddT42Char 

1 0 0 <> Roboto-Light AddT42Char 
Roboto-Light /CharStrings get begin
/space 3 def
/parenleft 10 def
/parenright 11 def
/comma 14 def
/hyphen 15 def
/one 19 def
/two 20 def
/three 21 def
/four 22 def
/five 23 def
/six 24 def
/nine 27 def
/equal 31 def
/c 69 def
/d 70 def
/m 79 def
/x 90 def
/y 91 def
end
Roboto-Light /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 57 /nine put
dup 61 /equal put
dup 99 /c put
dup 100 /d put
dup 109 /m put
dup 120 /x put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/TBXNNO+Roboto-Light /Roboto-Light findfont ct_VMDictPut
/TBXNNO+Roboto-Light*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
3{/.notdef}rp /one /two /three /four /five /six 2{/.notdef}rp 
/nine 3{/.notdef}rp /equal 37{/.notdef}rp /c /d 8{/.notdef}rp /m 
10{/.notdef}rp /x /y 134{/.notdef}rp]
TBXNNO+Roboto-Light nf
TBXNNO+Roboto-Light*1 [14 0 0 -14 0 0 ]msf
576.249 3633.74 mo
(d=6cm, x=-211mm, y=453mm)sh
%ADOBeginSubsetFont: Roboto-Black Initial
ct_T42Dict begin
-0.754 -0.27 1.199 1.059
 256 array 0 1 255 {1 index exch /.notdef put} for  /Roboto-Black
Type42DictBegin
[<00010000000c000c000c000c4f532f32bbde0148000000cc000000606376
742003aa19c00000012c000000366670676d3be951ab00000164000001bc
676c796681927b37000021f00001790068656164fd4e5e94000003200000
0036686865610b6509c00000035800000024686d7478ac64c29b0000037c
000010406c6f636140a7dec0000013bc000008226d617870063d03430000
1be0000000206e616d654d1193aa00001c00000004997072657086f65f3a
0000209c0000015167646972000000000000000000000000000304a90384
00050000059a05330000011f059a0533000003d100660200000002000000
000000000000e00002ff5000205b0000002000000000476f6f6700000020
fffd0862fdd500000862022b2000019f4f010000043a05b0002000200002
002a010400b700a7009400b10068008c00d400c8008700000015fe600015
043a001505b00015048d00100321000b06180002000000000000b0002c4b
b0095058b101018e59b801ff85b0841db109035f5e2db0012c2020456944
b001602db0022cb0012a212db0032c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db0042c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db0
052c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c0
441b2159592db0062c2020456944b001602020457d691844b001602db007
2cb0062a2db0082c4b20b003265358b0401bb000598a8a20b00326535823
21b0808a8a1b8a235920b0032653582321b0c08a8a1b8a235920b0032653
582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920
b003265358b0032545b8018050582321b8018023211bb003254523212321
591b2159442db0092c4b535845441b2121592db00a2cb019452db00b2cb0
1a452db00c2cb1270188208a5358b94000040063b80800885458b9001903
e870591bb0235358b02088b810005458b9001903e8705959592db00d2cb0
4088b820005a58b11a00441bb9001a03e844592d000100000001000076ee
c88e5f0f3cf50019080000000000cc77472500000000ce14cc1ef9f8fdd5
099d087e000000090002000000000000000100000862fdd500000969f9f8
fe71090800010000000000000000000000000000041001fe000000000000
01fe000001fe00000289002b04a6002504a2005405f1005b0564003c013c
002b02d7007802d6002c0397001a0446002d021d003803990098026b0088
02cfffe304a2005604a2009004a2003c04a2003104a2003a04a2005204a2
005304a2003404a2005604a2005102650088024300620414002e04ab0080
041400720413000f0711001a051400070523007205240050053a0072048d
007204990072054c005805a400720263008904a40038052d007204550072
06f4007205a40072057800510540007205ab005905480072050d00450481
001a0589006b0519ffff071b000a051b000e051efffd04ac00400241006c
0367fff00241000e039400240388000002b7004a043e002d047f00600416
002d047f0033043b004202e7000c047f0033047f00560231006f0224ff8d
045f00600231006f06e40060047f005a047f0033047f0060047f003302f5
00600418002302e60007047f0058041d000005cd0015041d0005041dfffb
041d004102990028020b00ac02990029050f005e0267008d04ba006204cb
00670575004504ea0012020c00770515005e04630094064800550388006c
041e00370464007d06480055042900a1032d007d044f005403580067034e
005602fa0060052100840459003c0291009e023900560243007003aa0075
041e003705a1005a05c10045068100410417003707860010043b00350588
005904f200740532008606c2002904ca0025048e003b04800033047d005f
05a700090248007b04da007603fefffd0263000405a90075047f005a07cb
005d0735004b021b005e02f6ffc005ac005a04af003105c3006b04cd0058
025cffa4043b00420409007803d9004e039f005f0298008a02a200800285
005a03db006f03a500a2029300930000fcf60000fcbc0000fc4f0000fcfc
0000fbd90000fcec030b0104048b00950292009e0476007205ed00120588
004c052700050485005505a30072048500490653004905ed002905640064
0480003c04db0086041d0000047f00330487005d03f60036047f005a04cf
006d02ad006a042ffff7046500690567004e047f00600403002d04980031
04350023047f0063061f00270431fff30621003906ea004205b5007f04ea
fff706ccfff505f9001904d90041086900260867007206090016058f005e
04ff007405f300110840000d05020042058f006305a50026050f000b06b4
00430625005e0596008707b7006e085f006e063b001c06f9007204fe0074
04d6002607c7007e04a1ffb4049f004d047e0075035900580525001a0737
001b0423003e047c005804960075047e000506240075047c0058047c0058
0431001a05de003504ed00580476005006af0058077f005a0569002406d2
0075048500750414002e0679007b0484002b0480ffd20415002c06ec0005
06e400580480ffdb047c005807cd006a06d400580485ffeb072000640612
0062057900050493000407b8007b0692005e0703006005d5005a09690089
0820007b0418ffe4042100060588005904800031052d0008041d00000588
00590480003307ce006a06ab006407cd006a06d4005804de004f04440050
04f600690000fc810000fc7e0000fdb10000fda90000f9f80000fa290485
ffeb04fd0072047e00600478007403c10059044700720457005905630074
04f9007606a1001605cf003707f4007205a2005a0872007206e6005a06a0
00590557004907200017058e0034056f005c0484005c05aa009105feffbd
04ceffab0540007404ab007605a40072047f005a0595004704350026049d
0049049d004904d5002d036b001504fe00440780007d06cb0056064a0046
051f002b04e6003b04b6006707b5003f06f2003907ee007406950042051c
0035044c003805a1001e05140040052d0058041400000829000004140000
0829000002b90000020a0000015c0000047f00000230000001a2000000d1
000000000000058400a1068b009f03850000018e0023018e002e018f0023
01b2006102e3002302eb002502dd00230440003204a9006702f50086045f
00930633009307b40065028a006c026c004c0386000f0375003503530045
04cb0063070d0082046a004305dc00580405fff208bf00730512005c050b
009206dd00650775006707a500670710006504f1003b058000a2052f0032
0460008704570033087a005c024eff9904ab006504890097046300860462
006d0444001a01ba00290516001000000000082700550835005c048f0014
038c00250342002504af005f0360ff960226ff8d02850028020000580398
0060039800670398005f0402004d0402004c0402feee0402004a0398005f
01fc006c04e4000404b600760497005704b90076044400760440007604eb
005705410076023800760427000b04a6007603ba007606230076052b0076
04c7005104cd0057049d0076046d00350435002504f70066049b0004062b
001d049d002f0438fffd046a003f04a3005602b600360435004804380037
045c001c045c0037045a005604a20047046c0047042d002e023c00460345
00610356005103750035036600590366005f02d70034038100570356004f
038f005f03ec00a002a2008b03410077049e0038049e0052049e005b03e8
0007043bffeb04b3004a049e005004b60076049e003c039f005f01fe0000
039900980558001905580019049dfff70481001a02e6fffb051400070514
0007051400070514000705140007051400070514000705240050048d0072
048d0072048d0072048d00720263ffba026300800263ffa70263ffa105a4
007205780051057800510578005105780051057800510589006b0589006b
0589006b0589006b051efffd043e002d043e002d043e002d043e002d043e
002d043e002d043e002d0416002d043b0042043b0042043b0042043b0042
0248ffae024800740248ff9b0248ff95047f005a047f0033047f0033047f
0033047f0033047f0033047f0058047f0058047f0058047f0058041dfffb
041dfffb05140007043e002d05140007043e002d05140007043e002d0524
00500416002d052400500416002d052400500416002d052400500416002d
053a007205150033048d0072043b0042048d0072043b0042048d0072043b
0042048d0072043b0042048d0072043b0042054c0058047f0033054c0058
047f0033054c0058047f0033054c0058047f003305a40072047f00560263
ffaf0248ffa30263ffc40248ffb80263ffc30248ffb7026300260231000e
02630080070700890455006f04a40038025cff89052d0072045f00600455
006f02310067045500720231006e0455007202c7006f04550072030d006f
05a40072047f005a05a40072047f005a05a40072047f005a047fffe90578
0051047f003305780051047f003305780051047f00330548007202f50060
0548007202f500600548007202f5ffff050d004504180023050d00450418
0023050d004504180023050d004504180023050d0045041800230481001a
02e600070481001a02e600070481001a030e00070589006b047f00580589
006b047f00580589006b047f00580589006b047f00580589006b047f0058
0589006b047f0058071b000a05cd0015051efffd041dfffb051efffd04ac
0040041d004104ac0040041d004104ac0040041d00410786001006c20029
058800590480003304b9ffd304b9ffd30435002504e4000404e4000404e4
000404e4000404e4000404e4000404e40004049700570444007604440076
04440076044400760238ffa80238006e0238ff950238ff8f052b007604c7
005104c7005104c7005104c7005104c7005104f7006604f7006604f70066
04f700660438fffd04e4000404e4000404e4000404970057049700570497
00570497005704b900650444007604440076044400760444007604440076
04eb005704eb005704eb005704eb0057054100760238ff9d0238ffb20238
ffb1023800140238006e0427000b04a6007603ba005e03ba007603ba0076
03ba0076052b0076052b0076052b007604c7005104c7005104c70051049d
0076049d0076049d0076046d0035046d0035046d0035046d003504350025
0435002504f7006604f7006604f7006604f7006604f7006604f70066062b
001d0438fffd0438fffd046a003f046a003f046a003f08da003505140007
04f1ff410608ff6602c7ff71058cffc80582ff1d0578ffbc02adff6f0514
000705230072048d007204ac004005a4007202630089052d007206f40072
05a4007205780051054000720481001a051efffd051b000e0263ffa1051e
fffd0480003c0487005d047f005a02ad006a047f006304da0076047f0033
05210084041d000002adff95047f0063047f0033047f006306ea0042048d
007204760072050d0045026300890263ffa104a40038052d0072052d0072
050f000b051400070523007204760072048d0072058f006306f4007205a4
00720578005105a3007205400072052400500481001a051b000e043e002d
043b0042047c0058047f0033047f00600416002d041dfffb041d0005043b
004203590058041800230231006f0248ff950224ff8d04960075041dfffb
071b000a05cd0015071b000a05cd0015071b000a05cd0015051efffd041d
fffb013c002b0289002b046a00730518000c025cff77018e002e06f40072
06e4006005140007043e002d0578ff5007fd000c07ff000c048d0072058f
0063043b0042047c005805ed002906210039052d0008041dffb9089c0033
09950051050200420423003e052400500416002d051efffd041d00000263
00890840000d0737001b0263008905140007043e002d05140007043e002d
0786001006c20029048d0072043b004205950047043500260840000d0737
001b050200420423003e058f0063047c0058058f0063047c005805780051
047f00330588005904800031058800590480003104d600260414002e050f
000b041dfffb050f000b041dfffb050f000b041dfffb0596008704760050
06f9007406d20075051b000e041d0005047f003305a50026047e00050514
0007043e002d05140007043e002d05140007043e002d0514ff70043eff03
05140007043e002d05140007043e002d05140007043e002d05140007043e
002d05140007043e002d05140007043e002d05140007043e002d05140007
043e002d048d0072043b0042048d0072043b0042048d0072043b0042048d
0072043b0042048dff38043bff05048d0072043b0042048d0072043b0042
048d0072043b0042026300890248007b026300730231005a05780051047f
003305780051047f003305780051047f00330578ffa5047fff2805780051
047f003305780051047f003305780051047f003305ac005a04af003105ac
005a04af003105ac005a04af003105ac005a04af003105ac005a04af0031
0589006b047f00580589006b047f005805c3006b04cd005805c3006b04cd
005805c3006b04cd005805c3006b04cd005805c3006b04cd0058051efffd
041dfffb051efffd041dfffb051efffd041dfffb049d0033049d0033052d
00720496007505a40072047c00580481001a0431001a051b000e041d0005
0596008704760050059600870476005004760072035900580840000d0737
001b05feffbd04ceffab047f005604fefff204fefff20476fff10359ffc0
0541ffa80473ffcd058f0063047c005805a40072047c005806f400720624
007505a50026047e0005051efffd041d0000051b000e041d00050487005d
0499000d068b009f0235007300000000000000000000002e00a2011c01ac
024c0268029202bc02fa0322033c0354036e038603d60402045a04cc0514
057605e00616068e06f4070a072007400774079407f4089408d60942099e
09e20a2c0a740ade0b340b500b880bd40bfa0c4c0c8a0cdc0d240d800de4
0e520e7e0ebc0eec0f3a0f7c0fae0fe8100e1026104a1074109010b81156
11bc1208126e12d2133c13b81402143c148e14d614f2156615b015fa1660
16c41704178c17dc1826185618a418e81936197019b219ca1a0c1a4e1a76
1ad41b421bb01c181c3c1ce81d161d9e1e181e241e3c1eda1ef01f2e1f7a
1f8c1f9e1fc62016204020522086209820e220ee21082122213c21962206
223422b22302235c243624a224de255025b8262a2646269226de271e2776
27d628622914295c29de2a422aa02af22b562b882be82c1e2c4a2c742c86
2cb62ce22d1c2d562da82dc22ddc2de62e122e522e6e2e8c2ebc2ec82ef0
2f202f9e2fd030243054309a310c316831c8324232b832f6337233fe3462
34ac350c353e359e361a366836c23722378637b437f8386038d43932399e
3a063a643ad63b3c3ba83c163c963cec3d303d823dd83e483eb83ef63f3a
3f883ff84034407840b64102415641b241f8426042ec434043b44426444e
44a24512459a45d84624466646b047064736476247f64832487648b248f8
494a49a449e84a664ad64b2a4ba84c264c924d144d7a4dba4e1c4e7e4ee0
4f685000505050a25110518051ea525452d8535a540854ba552c559e55e0
56285698570657c6588258fc597859cc5a1c5a525a6a5a9c5ab25ac85bbc
5c2c5c8e5ce25d565d8a5dbc5e125e5c5eb45f0c5f625fb8601e608060e0
613461c46244629062da632c637e63c2643664a46500655065c0662e6692
66f2675467b067c067f4683e689c692269966a066a6e6ad86b3e6ba46c20
6c886ce06d346d846dd26e446e446e446e446e446e446e446e446e446e44
6e446e446e446e4e6e586eb46ed26ef06f0a6f1e6f366f4e6f746fb47018
703470407050710e712671407154716871bc724a72d073847422748874a8
74f875567570758a75a475be7616763e7680769876cc774e77ac7832787e
78a678cc7906793079ae79ae7b287b7a7bbe7bf07c1c7c6c7ca07cce7cfe
7d147d947e0e7e7a7f127f607f9c7fd6802a8044808480fc814e818e81d8
8220828482d882f4832c8378839e83e88426847284ca8534859c85ca8606
8636868486f68728876287ae87d8882e88c4890a897489da8a328aae8b16
8b3e8b948c1e8c668cce8d368d688de28e3e8e868e9e8ef48f248f6a8fc6
903090669114918c91f2923892a092a892a892b0930e936c93d2941a9482
949494a694b894ca94e094f6950e951a952c953e955095669578958a959c
95b295c495d695e895fa960c9622963496469658966e9680969296a496b6
96c896dc96f2970a97169728973a974c976097729784979697ac97be97d0
97e297f49806981a982c983e985098649876988a989c98ae98c098d298de
98ea98fc990e99209932994499569968997a998c99a299b499c699d899ea
99fc9a0e9a1a9a269a389a4a9a5c9a6e9a809a929aa49ab69ac29ad49ae6
9af89b0a9b1c9b2e9b409b529b649b709b7c9b8e9b9a9ba69bb89bca9bd6
9be29bf49c069c129c1e9c349c4a9c5a9c6a9c7c9c8e9c9a9ca69cb89cca
9ce09cf29d049d169d289d3e9d529d649d769d829d8e9da09db29dc49dd6
9de89dfa9e069e129e1e9e2a9e3c9e4e9e5a9e669e729e7e9e909ea09eb2
9ec49ed69ee89efa9f0c9f229f389f4e9f629f6e9f7a9f8c9f9e9fb09fc2
9fd89fea9ffca00ea020a032a044a056a068a07aa08ca0b0a0d4a0eaa0fc
a10ea120a132a146a15ca174a180a192a1a4a1b6a1caa1dca1eea200a216
a228a23aa24ca25ea270a284a296a2a8a2baa2cea2e0a2f2a304a310a322
a334a346a358a36aa37ca38ea3a0a3aca3bea3d0a3e2a3f4a400a412a424
a436a448a454a466a478a484a496a4a2a4b8a4c8a4daa4e6a4f8a50aa51c
a530a542a54ea560a572a584a590a5a2a5aea5c0a5d2a5e4a5f6a60ca620
a62ca63ea650a664a676a688a69aa6a6a6b2a6bea6caa6d6a6e2a6eea6fa
a712a71aa722a72aa732a73aa742a74aa752a75aa762a76aa772a77aa782
a798a7aea7c0a7d2a7e4a7f6a80ea816a81ea826a82ea844a858a86aa87c
a88ea8a4a8b6a924a92ca942a94aa952a964a976a97ea986a98ea996a9a8
a9b0a9b8a9c0a9c8a9d0a9d8a9e0a9e8a9f0a9f8aa0aaa12aa1aaa6eaa76
aa7eaa92aaa4aaacaab4aacaaad2aae4aaf6ab08ab1aab2cab3eab54ab6a
ab7cab8eaba0abb8abc4abd0abe2abf4ac06ac18ac24ac30ac42ac4eac5e
ac70ac82ac94aca6acaeacb6acccace2aceeacfaad06ad12ad1ead2aad32
ad3aad42ad54ad66ad6ead80ad92ada8adbcadc4adccaddeadf0ae06ae1a
ae30ae46ae5cae70ae82ae94aeaaaebeaed4aee8aef0aef8af0eaf22af38
af4caf5eaf70af86af9aafb0afc4afdaafeeb008b022b02eb03ab042b04e
b05ab066b072b084b096b0a8b0bcb0ceb0e2b0f8b10cb122b136b14cb162
b178b18cb1a2b1b6b1ccb1e0b1f6b20ab220b236b242b24eb260b272b284
b296b2acb2c0b2d6b2eab300b314b32ab33eb354b36ab37cb38eb39ab3a6
b3b2b3beb3d0b3e2b3f8b40cb422b436b44cb460b476b48ab4a0b4b6b4c8
b4dab4ecb4feb510b522b534b546b552b55eb56ab576b588b59ab5acb5be
b5d0b5e2b5f4b606b618b62ab636b642b64eb65ab66cb67eb690b6a2b722
b72eb73ab746b752b75eb76ab776b782b78eb79ab7a6b7b2b7beb7cab7d6
b7e2b7eeb7fab806b80eb874b8dab91ab95ab9beba20ba36ba4cba58ba64
ba70ba7cba88ba94bae2bb32bb8abbeabbf2bc48bc52bc80000000010000
041000970016005f0005000100000000000e00000200024b000300010000
001e016e0001000000000000001f00000001000000000001000c001f0001
0000000000020007002b0001000000000003001800320001000000000004
000c001f00010000000000050016004a0001000000000006000c00600001
0000000000070020006c00010000000000090006008c000100000000000b
000a0092000100000000000c0013009c000100000000000d002e00af0001
00000000000e002a00dd0001000000000012000c001f0003000104090000
003e01070003000104090001001801450003000104090002000e015d0003
0001040900030030016b0003000104090004001801450003000104090005
002c019b0003000104090006001801c70003000104090007004001df0003
000104090009000c021f000300010409000b0014022b000300010409000c
0026023f000300010409000d005c0265000300010409000e005402c10003
000104090010000c03150003000104090011000a03210003000104090012
00180145466f6e74206461746120636f7079726967687420476f6f676c65
2032303132526f626f746f20426c61636b526567756c6172476f6f676c65
3a526f626f746f20426c61636b3a3230313356657273696f6e20312e3130
303134313b2032303133526f626f746f2d426c61636b526f626f746f2069
7320612074726164656d61726b206f6620476f6f676c652e476f6f676c65
476f6f676c652e636f6d43687269737469616e20526f62657274736f6e4c
6963656e73656420756e6465722074686520417061636865204c6963656e
73652c2056657273696f6e20322e30687474703a2f2f7777772e61706163
68652e6f72672f6c6963656e7365732f4c4943454e53452d322e30004600
6f006e00740020006400610074006100200063006f007000790072006900
670068007400200047006f006f0067006c00650020003200300031003200
52006f0062006f0074006f00200042006c00610063006b00520065006700
75006c006100720047006f006f0067006c0065003a0052006f0062006f00
74006f00200042006c00610063006b003a00320030003100330056006500
7200730069006f006e00200031002e003100300030003100340031003b00
2000320030003100330052006f0062006f0074006f002d0042006c006100
63006b0052006f0062006f0074006f002000690073002000610020007400
72006100640065006d00610072006b0020006f006600200047006f006f00
67006c0065002e0047006f006f0067006c00650047006f006f0067006c00
65002e0063006f006d00430068007200690073007400690061006e002000
52006f00620065007200740073006f006e004c006900630065006e007300
65006400200075006e006400650072002000740068006500200041007000
610063006800650020004c006900630065006e00730065002c0020005600
65007200730069006f006e00200032002e00300068007400740070003a00
2f002f007700770077002e006100700061006300680065002e006f007200
67002f006c006900630065006e007300650073002f004c00490043004500
4e00530045002d0032002e00300052006f0062006f0074006f0042006c00
610063006b000000b00c2bb0002b00b2010a022b00b7012f271d160c0008
2bb7023e3328191000082bb70344382d201400082bb7044d3f3123130008
2bb70540362b201300082bb7066d5945321300082bb70751423324130008
2bb70836271d160e00082bb709362a1d180e00082bb70a54453626170008
2b00b20b07072bb00020457d691844b2300d0173b2700d0173b2800d0173
b2d00d0173b2200d0174b23f0f0173b25f0f0173b27f0f0173b22f0f0174
b24f0f0174b26f0f0174b28f0f0174b2af0f0174b2ff0f0174b21f0f0175
b23f0f0175b25f0f0175b27f0f0175b20f110173b27f110173b2ef110173
b21f110174b25f110174b28f110174b2cf110174b2ff110174b23f110175
b26f110175b2bf130173b22f130174b29f130174b2bf130174b20f130175
b22f130175b22f150173b25f150173b2ff150173b24f150174b2cf150174
b22f170173b23f170173b27f17017300000000>
[16269 16261 16309 16381 16349 14949 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 12616 90 <0001000500000421043a000d004500b0004558b0022f1bb1020f3e59b000
4558b00c2f1bb10c0f3e59b0004558b0052f1bb1050b3e59b0004558b009
2f1bb1090b3e59b2000c09111239b207090c111239303101331321010121
03230321010121020c0689017bfec60145fe85900690fe850145fec50179
02fb013ffde9fddd0149feb702230217>Roboto-Black AddT42Char 
1 12752 91 <0001fffbfe4b0425043a0015004900b0004558b0032f1bb1030f3e59b000
4558b0142f1bb1140f3e59b0004558b0082f1bb1080d3e59b0004558b013
2f1bb1130b3e59b001d0b00810b10f01b00a2b5821d81bf4593031011733
1321010606232226273716163332363737012102030106b30168fe51329e
ac2c383c290e0e0b504a121bfe8a016701dd080265fb25789c0b0ff10303
2f2f46044600>Roboto-Black AddT42Char 

1 0 0 <> Roboto-Black AddT42Char 
Roboto-Black /CharStrings get begin
/x 90 def
/y 91 def
end
Roboto-Black /Encoding get
dup 120 /x put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/TBXNNP+Roboto-Black /Roboto-Black findfont ct_VMDictPut
/TBXNNP+Roboto-Black*1 
[120{/.notdef}rp /x /y 134{/.notdef}rp]
TBXNNP+Roboto-Black nf
TBXNNP+Roboto-Black*1 [72 0 0 -72 0 0 ]msf
1858.08 4794.98 mo
(x)sh
1331.07 3903.99 mo
(y)sh
TBXNNO+Roboto-Light*1 [14 0 0 -14 0 0 ]msf
1088.85 3633.73 mo
(\(-51, 453\))sh
401.651 3406.18 mo
(\(-291, 533\))sh
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
[
[/CSA [/0 ]]
] del_res
/TBXNNM+Roboto-Regular*1 uf
/TBXNNM+Roboto-Regular uf
/Roboto-Regular uf
/TBXNNN+Roboto-Bold*1 uf
/TBXNNN+Roboto-Bold uf
/Roboto-Bold uf
/TBXNNO+Roboto-Light*1 uf
/TBXNNO+Roboto-Light uf
/Roboto-Light uf
/TBXNNP+Roboto-Black*1 uf
/TBXNNP+Roboto-Black uf
/Roboto-Black uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
grestore

%%EndDocument

Pscript_WinNT_Compat dup /suspend get exec
Pscript_WinNT_Incr dup /resume get exec
LH
(%%[Page: 1]%%) = 
%%PageTrailer

%%Trailer

Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%PageOrder: Special
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%BoundingBox: 72 42 2457 5077
%%DocumentNeededResources: 
%%DocumentSuppliedResources: 
%%+ procset Pscript_WinNT_ErrorHandler 5.0 0
%%+ procset Pscript_FatalError 5.0 0
%%+ procset Pscript_Win_Basic 5.0 0
%%+ procset Pscript_Win_Utils_L2 5.0 0
%%+ procset Pscript_WinNT_Compat 5.0 0
%%+ procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
Pscript_WinNT_Incr dup /terminate get exec
ehsave restore
%%Pages: 1
(%%[LastPage]%%) = 
%%EOF
%-12345X@PJL EOJ
%-12345X